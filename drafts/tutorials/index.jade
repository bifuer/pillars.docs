include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Tutorials',url:'/pillars/docs/tutorials/'},{label:'Hola Mundo',url:'/pillars/docs/tutorials/hola-mundo.jade'}];
	+tutorial-layout("Pillars.js Tutorials - Hola Mundo - 'make it easy!'",path)

		#title
			h1 Hola Mundo
				em  Tutoriales Pillars.js
			//a.source(href="https://github.com/pillarsjs/pillars/blob/master/lib/Route.js") Source
			
		section.examplecode
			h2#examplecode Hola Mundo con Pillars.js

			:markdown
				Todas las aplicaciones Pillars.js se compondrán de: 
				+ Los ficheros de la aplicación. En este caso **app.js**, y
				+ El fichero descriptor de la aplicación **package.json**, donde indicaremos las dependencias de nuestra aplicación web. En este caso especificamos que utilizamos Pillars.js. 

				> Puedes encontrar más información sobre cómo funciona el archivo package.json en el sitio web de [npmjs](https://www.npmjs.org/doc/files/package.json.html).

				Crea primero un directorio para albergar estos dos ficheros, y después créalos y puedes copiar el código especificado:			

			:markdown
				---
				**Fichero app.js**

			:highlight(lang='javascript')
				1 | require("pillars").start();
				2 |				
				3 | addRoute(function(gw){
				4 |	 gw.send("Hola Mundo");
				5 | });

			:markdown
				---
				**Fichero package.json**

			:highlight(lang='javascript')
				{
				  "dependencies": {
				  		"pillars": "*"
				  }
				}

			:markdown
				Hasta este punto, debes tener instalado ya Node.js, pero no has instalado Pillars.js, por no que vamos a instalarlo en el directorio del proyecto con el comando `npm install`. Este comando instala las dependencias descritas en el fichero *package.json* y las instala. Verás que se crea la carpeta `node_modules` en el directorio del proyecto.

				Pillars.js no crea una estructura fija de carpetas donde tengas que ceñirte para guardar las css, html, jade, etc. de tu proyecto. Decide tú, dependiendo de las necesidades de tu proyecto, como organizarlo.


				Una vez tengas los dos ficheros creados y con el código descrito, podrás arrancar la aplicación con el comando `node app.js` en el directorio del proyecto. Verás que en la consola comienza a arrancar el servidor. Seguidamente abre el navegador y verás que tienes Pillars.js funcionando en: `http://localhost:3000`, y te aparecerá "Hola Mundo".


		//- Description
		section.analysis
			h2#description Análisis del código de app.js
			:markdown
				En la **línea 1** se realiza la inclusión de la librería y se ejecuta el método [`.start()`](/pillars/docs/reference/entorno.jade#method-start).

				El `require("pillars")` también devuelve el objeto ENV, que contiene la configuración del entorno, métodos para arrancar y parar la aplicación, y es el punto de anclaje para los controladores (objetos route) y plugins. 

				Al devolver la llamada a `require("pillars")` el objeto ENV, podemos ejecutar sobre el require el método `.start()`. Dicho de otro modo: 

			:highlight(lang='javascript')
				// De esta forma, tenemos en la variable app, el entorno de la aplicación, y
				//  además tenemos disponible en el entorno la variable global ENV
				var app = require("pillars");
				app.start();


			:markdown
				De una forma más simplificada y corta, realizamos la inclusión de la librería y a la misma vez, arrancamos el servicio HTTP:

			:highlight(lang='javascript')
				require("pillars").start();
			:markdown
				Además la inclusión de la librería setea una serie de variables y funciones de forma global, es por ello que en la **linea 3**, ejecutamos directamente el método `addRoute()`. Se debe a que es seteado de forma global, es un alias del método [`ENV.addRoute()`](/pillars/docs/reference/entorno.jade#method-addRoute). 

				En la linea 3 estamos **añadiendo un controlador al entorno**. Los controladores del entorno son instancias de la [Clase Route](/pillars/docs/reference/route.jade). Adémás de poder crear instancias de la Clase Route de la forma clásica: `var route = new Route(...)`, El método `addRoute()` crea directamente este objeto al pasarle como parámetro/s los datos para la creación. Para más información puedes ver el método [`ENV.addRoute()`](/pillars/docs/reference/entorno.jade#method-addRoute) en la referencia.

				Como se puede observar en este caso, addRoute acepta como parámetro el manejador (handler). Este objeto route responderá en `/`, ya que el path por defecto de un objeto route es este.

				El handler acepta como parámetro gw, [objeto gangway](/pillars/docs/reference/gangway.jade). Este objeto contiene todos los datos de la solitud parseados y ordenados. También dispone de diversos métodos para responder al cliente, en este caso se utiliza el método [`gw.send()`](/pillars/docs/reference/gangway.jade#method-send) en la **línea 4**. Al pasar como parámetro un String a este método, éste enviará al cliente una respuesta *text/html*, creando el mismo todos los encabezados HTTP necesarios para la respuesta. 

				Cuando se ejecuta uno de los métodos de gangway de [envío de datos al cliente](/pillars/docs/tutorials/server-client.jade) (más adelante en la sección de tutoriales se ven todos los métodos de envío de datos al cliente), se finaliza la ejecución del objeto route, por lo que si hubiera código después éste no se ejecutaría.

		
