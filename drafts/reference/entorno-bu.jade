include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'Entorno (ENV)',url:'/pillars/docs/reference/entorno.jade'}];
	+reference-layout("Pillars.js Reference - Entorno (ENV) - 'make it easy!'",path)

		#title
			h1 pillars (Entorno)
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/lib/ENV.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:marked
				La variable `ENV` está disponible de forma global al realizar la inclusión de la librería. 

				Mediante `ENV` se **configura el entorno de la aplicación web** y es el **punto central y de anclaje** para el resto de los elementos que componen el framework.

				El entorno de la aplicación es todo aquello que necesitamos configurar para una aplicación web. Podemos configurar elementos como; puerto al que responderá la aplicación, configuración del smtp, configuración de los idiomas de la aplicación, tamaño de archivo máximo permitido por el servidor, etc.
	
				
		//- Syntax
		section.syntax
			h2#syntax Sintaxis
			:highlight(lang='javascript')
				//Inclusión de la librería y método start() para arrancar el servidor.
				require("pillars").start();

				//Configuración del entorno
				ENV.configure({
					languages: ['es','en'],
					debug: true,
					server:{
						port: 80,
						maxUploadSize: 1024*1024*50;
					}
				});
				

				//Añadimos al entono otros componentes del framework

				// - Un objeto route
				ENV.addRoute(function(gw){gw.send("Hola Mundo!")});

				// - Un objeto plugin
				ENV.addPlugin();
				

		//- Description
		section.description
			h2#description Descripción
			:marked
				Al realizar el require() de la librería obtenemos acceso a `ENV`, el entorno de Pillars.js, que se instancia de forma **global**.
				
				El entorno consiste en una serie de **propiedades** y **funciones** que nos permiten trabajar con el framework. La variable global `ENV` es la más importante, punto central de configuración y arranque del entorno. Además tendremos acceso a **Clases como Plugin o Route**, y a las diferentes funciones que nos permitirán construir nuestra aplicación.

				`ENV` es un objeto global cuyas propiedades conforman la configuración de nuestra aplicación y sus métodos nos permiten la construción de la misma. Disponemos de propiedades que nos permiten configurar el servicio HTTP o la conexión a la base de datos, mientras otros métodos como `.addRoute()` o `.addPlugin()` son el mecanismo para añadir controladores a nuestro entorno.

				Junto a `ENV` se establecen de forma global las referencias a clases como Plugin o Route para que sea posible instanciar dichos objetos, también acceso a funcionalidades como renderer, i18n, logger o cron. Todo esto nos ofrece un entorno de trabajo completo y centralizado cuyo **punto central** es `ENV`.

				> Nota: Puedes encontrar una referencia a las **variables globales de Pillars** [aquí](/pillars/docs/reference/entorno.jade#vblesglobales).

				En el ejemplo podemos ver una configuración básica del entorno por medio de la variable ENV. Es posible establecer propiedades de forma individual o agrupada usando el método `.configure()`.

			:highlight(lang='javascript')
					ENV.configure({
						debug : true,
						directories:{
							uploads:'./uploads',
							temp:'./temp'
						},
						templates:{
							cache:false
						},
						languages : ['es','en'],
						administrator:{
							mail:'administrator@domain.com',
							firstname:'Name',
							lastname:'Surname'
						},
						server:{
							port:3000,
							timeout:10*1000
						},
						database:{
							store:'databaseName'
						},
						smtp: {
							service: 'gmail',
							auth: {
								user: 'myuser@gmail.com',
								pass: '******'
							}
						}
					});

		//- Properties
		section.properties
			h2#properties Propiedades

			//- Property
			section.property
				h3#property-debug: code
					small ENV
					| .debug

				//- Property description
				section.description
					:marked
						 La propiedad `.debug` establece el entorno en modo debug, lo que hará que se muestre información adicional de los errores. 
						 Es de tipo **Boolean**
						 Por defecto es: **true**

			//- Property
			section.property
				h3#property-languages: code
					small ENV
					| .languages

				//- Property description
				section.description
					:marked
						`.languages` es de tipo **Array**. Define los idiomas disponibles en el entorno. Por defecto el idioma es `['en']`. Nótese que la consola también es traducida, de forma que si establecemos como primer idioma `['es']` los mensajes de la consola aparecerán en español.

						Cuando seteamos `.languages`, se emite el evento `languages`.

					:highlight(lang='javascript')
						//La aplicación estará disponible en tres idiomas, siendo el predeterminado 'es'.
						ENV.languages=['es','en','de'];

					:marked
						> Para conocer más acerca de los idiomas de una aplicación, consultar el módulo [Textualization (i18n)](/pillars/docs/reference/i18n.jade)


			//- Property
			section.property
				h3#property-administrator: code 
					small ENV
					| .administrator

				//- Property description
				section.description
					:marked
						La propiedad `.administrator` permite configurar los datos del administrador/a de la aplicación. Es un conjunto de propiedades con los siguientes elementos:
						+ `mail`: para definir el email del administrador de la aplicación.
						+ `firstname`: nombre del administrador.
						+ `lastname`: apellidos del administrador.

					:highlight(lang='javascript')
						ENV.administrator={
							mail: correo@tudominio.es,
							firstname: 'Nombre' ,
							lastname: 'Apellidos'
						};

			//- Property
			section.property
				h3#property-server: code 
					small ENV
					| .server

				//- Property description
				section.description
					:marked
						La propiedad `.server` es un conjunto de propiedades para configurar el servidor HTTP:
						* `hostname`: nombre de host. Si no se especifica ninguno, responderá a cualquier host. Por defecto es **undefined**.
						+ `port`: puerto en el que responderá el servidor HTTP.Por defecto: 3000.
						- `timeout`: tiempo de espera máximo de cualquier solicitud HTTP. Es de tipo **Integer** y expresada en milisegundos. Por defecto: 10\*1000.
						+ `maxUploadSize`: **Integer**, especifica el tamaño máximo de archivo permitido por el servidor HTTP. Por defecto 10\*1024\*1024 (10MB).
						+ `maxZipSize`: **Integer** para determinar el tamaño máximo de archivo que comprimirá el servidor. Por defecto: 5\*1024\*1024 (5MB).
						+ `https`: objeto con los parámetros `.key` y `.crt` que definen los ficheros .key y .cert necesarios para activar el protocolo https. También se puede definir el puerto con `.port`, pero no es necesario ya que por defecto es el puerto 443. Para más información sobre montar un servidor seguro consulta el [tutorial HTTPS](/pillars/docs/tutorials/https.jade). 

					:highlight(lang='javascript')
						ENV.server={
							hostname:'127.0.0.1',
							port:80,
							timeout:100*1000,
							maxUploadSize:20*1024*1024,
							maxZipSize:10*1024*1024,
							https:{
								key:'./localhost.key',
								cert:'./localhost.crt',
								host: '443'
							}
						};

					:marked
						> Nota: El servidor HTTP comprime previamente los envíos a cliente. Esta compresión la realiza dependiendo de los compresores que tenga disponibles el cliente, por defecto si está disponible usa deflate. Con la propiedad `ENV.server.maxZipSize` establecemos a partir de qué tamaño el servidor no comprimirá los archivos.

			//- Property
			section.property
				h3#property-database: code 
					small ENV
					| .database

				//- Property description
				section.description
					:marked
						La propiedad `.database` es un conjunto de propiedades para configurar la base de datos:
						+ `store`: **String**. Nombre de la base de datos.
						+ `hostname`: **String**. Nombre de host.
						+ `port`: **Integer**. Puerto de la base de datos.
						+ `user`: **String**, nombre de usuario con privilegios para la base de datos.
						+ `password`: **String** Contraseña del usuario.

					:highlight(lang='javascript')
						ENV.database={
							store:'dbtest',
							hostname:'127.0.0.1',
							port:'27017',
							user:'myname',
							password:'mypass'
						};

					:marked

			//- Property
			section.property
				h3#property-directories: code 
					small ENV
					| .directories

				//- Property description
				section.description
					:marked
						La propiedad `.directories` es un conjunto de propiedades para configurar los directorios del sistema:
						+ `uploads`: **String**. Ruta relativa o absoluta del directorio donde se almacenarán los archivos subidos al servidor. Por defecto es undefined.
						+ `temp`: **String**. Ruta relativa o absoluta del directorio de archivos temporales. Por defecto es undefined.

					:highlight(lang='javascript')
						ENV.directories={
							uploads:'./uploads',
							temp:'./temp'
						};

					:marked

			//- Property
			section.property
				h3#property-templates: code 
					small ENV
					| .templates

				//- Property description
				section.description
					:marked
						La propiedad `.templates` es un conjunto de propiedades para configurar opciones de templates y templates en concreto que utilizará el sistema:
						+ `cache`: Tipo **Boolean** determina si está activa la caché de templates o no. Por defecto está activa en **true**.
						+ `directory`: Tipo **String** para determinar la plantilla estática a utilizar al servir directorios estáticos. Por defecto es: **./templates/directory.jade**. Hay que tener en cuenta que el Plugin Directory debe estar activo.
						+ `error`: Tipo **String** para determinarla plantilla de errores. Se utiliza en cualquier página de error del sistema, por ejemplo un error 404. Por defecto es: **./templates/error.jade**.

					:highlight(lang='javascript')
						ENV.templates={
							cache: false,
							directory:'./templates/directory.jade',
							error: './templates/error.jade'
						};

					:marked
						> Nota: Pillars.js cuenta por defecto con Jade como lenguaje de templating. Se pueden añadir más motores con renderer.addEngine().

			//- Property
			section.property
				h3#property-smtp: code 
					small ENV
					| .smtp

				//- Property description
				section.description
					:marked
						La propiedad `.smtp` es un conjunto de propiedades para configurar el servidor smtp.  Utiliza la librería [node-mailer](https://github.com/andris9/Nodemailer):
						+ `hostname`: nombre de host
						+ `port`: puerto 
						+ `user`: usuario del servidor de correo. Tipo **String**.
						+ `password`: contraseña del usuario. Tipo **String**.

					:highlight(lang='javascript')
						ENV.smtp={
							hostname:'',
							port:'',
							user:'',
							password:''
						};

					:marked


			//- Property
			section.property
				h3#property-routes: code 
					small ENV
					| .routes

				//- Property description
				section.description
					:marked
						La propiedad `.routes` es una instancia de la [Clase ObjectArray](/pillars/docs/reference/objectarray.jade), por lo que es un Array de Objetos, donde **cada objeto es un objeto tipo Route**.

						Por lo tanto, en la propiedad`.routes` se encuentran los objetos route que están disponibles en la aplicación, y además ofrece una serie de métodos, da la clase ObjectArray, para trabajar con los objetos route del array, que son:
						+ **.add(route)**
						+ **.get(id)**
						+ **.remove(id)**
						+ **.move(id, pos)**
						+ **.moveBefore()**
						+ **.moveAfter()**

						



					:highlight(lang='javascript')
						require("pillars");

						var route = new Route({
								path:'hello'
							},
							function(gw){
								gw.send("Hello World!!");
							});

						ENV.routes.add(route);

					:highlight(lang='javascript')
						// Se imprime: 
						[
							{
								"domain": null,
								"_events": {},
								"_maxListeners": 10,
								"id": "pillarsStatic",
								"path": "pillars/*:path",
								"directory": {
									"path": "C:\\Users\\NEMESISCBM\\Documents\\pillarsjs\\static",
									"listing": true
								},
								"handlers": [],
								"params": [
									"path"
								],
								"pathRegex": {},
								"method": [
									"GET"
								],
								"active": true,
								"routes": []
							}
						]

					:marked

			//- Property
			section.property
				h3#property-plugins: code 
					small ENV
					| .plugins

				//- Property description
				section.description
					:marked
						La propiedad `.plugins` es de solo lectura y devuelve un Array de objetos, con todos los objetos plugin que tiene agregado `ENV`. Los plugins con los que se inicia Pillars.js, en orden, son los siguientes:
						+ LangPath
						+ Encoding
						+ Router
						+ MaxUploadSize
						+ CORS
						+ OPTIONS
						+ Sessions
						+ Accounts
						+ Directory
						+ BodyReader


			//- Property
			section.property
				h3#property-crypt: code 
					small ENV
					| .crypt

				//- Property description
				section.description
					:marked
						La [propiedad crypt](https://github.com/bifuer/pillars/blob/master/lib/ENV.js#L71) define el algoritmo de encriptación y la clave mediante ENV.crypt.algorithm y ENV.crypt.password.

					:highlight(lang='javascript')
						ENV.crypt={
							algorithm:'aes-256-ctr',
							password:'pillars'
						};

					:marked
						Esta propiedad es usada junto con los métodos `ENV.encrypt()` y `ENV.decrypt()` para encriptar y desencriptar datos. 

						Actualmente se encripta [gw.etag](/pillars/docs/reference/gangway.jade#property-etag) para enviarlo al cliente.


			//- Property
			section.property
				h3#property-package: code 
					small ENV
					| .package

				//- Property description
				section.description
					:marked
						`.package` es de solo lectura. Devuelve el contenido de `package.json` en un objeto.

			//- Property
			section.property
				h3#property-version: code 
					small ENV
					| .version

				//- Property description
				section.description
					:marked
						`.version` es de solo lectura. Devuelve la versión del framework instalada.

			//- Property
			section.property
				h3#property-path: code 
					small ENV
					| .path

				//- Property description
				section.description
					:marked
						La propiedad `.path` es de solo lectura y devuelve el path absoluto de la librería pillars.


			//- Property
			section.property
				h3#property-status: code 
					small ENV
					| .status

				//- Property description
				section.description
					:marked
						La propiedad `.status` es de solo lectura. Devuelve un objeto con todos los routes y plugins que la aplicación tiene añadidos.



		//- Methods
		section.methods
			h2#methods Métodos

			//- Method
			section.method
				h3#method-start: code
					small ENV
					| .start()

				//- Method description
				section.description
					:marked
						Arranca el servidor HTTP. Puede arrancar sin aceptar parámetros, por lo que se pondría en marcha con los valores por defecto. Acepta como parámetros el conjunto de propiedades [ENV.server](#property-server).

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.start( [Server configuration] , [callback] );

					:marked
						+ *Server configuration*: Opcional. configuración del conjunto de propiedades [ENV.server](#property-server).
						+ *callback*: Opcional. Callback que se ejecutará cuando se arranque el entorno.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Inicio del servidor con los valores por defecto:
						ENV.start();

						//Inicio del servidor de forma abreviada, indicando solo el puerto
						ENV.start(80);

						//Inicio del servidor configurando los parámetros del servidor:
						ENV.start({
							hostname:'127.0.0.1',
							port:3000,
							timeout:100*1024,
							maxUploadSize:1024*1024,
							maxZipSize:1024*1024
						});

						//Inicio del servidor con callback
						ENV.start(3000, function(){
							console.log("Servidor arrancado");
						});

			//- Method
			section.method
				h3#method-stop: code
					small ENV
					| .stop()

				//- Method description
				section.description
					:marked
						Detiene el servidor HTTP.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.stop( [callback] );

					:marked
						+ *callback*: Opcional. Callback que se ejecutará cuando se detenga el entorno.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Detención del servidor HTTP
						ENV.stop();

						//Detención de servidor con callback
						ENV.stop(function(){
							console.log("Servidor parado");
						});

			//- Method
			section.method
				h3#method-connect: code
					small ENV
					| .connect()

				//- Method description
				section.description
					:marked
						Conecta a una base de datos MongoDB. Acepta como parámetros el conjunto de propiedades [ENV.database](#property-database).

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.connect( database configuration [, callback]);

					:marked
						+ *database configuration*: [conjunto de propiedades para configurar la base de datos.](#property-database)
						+ *callback*: Opcional. Callback que se ejecutará cuando se arranque el entorno.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Conecta a la base de datos con los parámetros indicados: 
						ENV.connect({
							store: 'dbtest'
							hostname:'127.0.0.1',
							port:27017,
							user: 'myname',
							pass: 'mypass'
						});

						//Inicio del servidor con callback
						ENV.connect(
						{
							store: 'dbtest'
							hostname:'127.0.0.1',
							port:27017,
							user: 'myname',
							pass: 'mypass'
						},

						function(){
							console.log("Conexión a base de datos realizada");
						});

			//- Method
			section.method
				h3#method-disconnect: code
					small ENV
					| .disconnect()

				//- Method description
				section.description
					:marked
						Desconecta la base de datos MongoDB.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.disconnect( [callback] );

					:marked
						+ *callback*: Opcional. Callback que se ejecutará cuando se desconecte la base de datos.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Desconecta la base de datos 
						ENV.disconnect();

						//Desconecta la base de datos con callback
						ENV.disconnect(function(){
							console.log("Desconexión de la base de datos realizada");
						});


			

			//- Method
			section.method
				h3#method-addRoute: code
					small ENV
					| .addRoute()

				//- Method description
				section.description
					:marked
						El método `.addRoute()` añade controladores y rutas a la aplicación, es decir, un objeto de la [Clase Route](route.jade). 
						Acepta como parámetro el objeto creado previamente, o la configuración para su creación, por lo que lo podemos añadir de dos formas.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.addRoute( route object );

					:marked
						+ *route object*: Objeto route creado previamente.

					codesyntax.
						ENV.addRoute( [route configuration] , [handler] );

					:marked
						+ *route configuration*: Opcional. Objeto de configuración para la creación del route.
						+ *handler*: Opcional. Manejador para el nuevo route.

						> Nota: El objeto se puede declarar sin configuración, por lo que toma los valores predeterminados. También se puede declarar sin manejador, por lo que en este caso el objeto route actuaría como elemento organizativo.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						// Objeto route creado previamente

						var route = new Route(
							{
								id:'home', 
								path:'/'
							},
							function(gw){
								gw.send("Hola Mundo");
							}
						);


						// Añadimos el objeto route al entorno

						ENV.addRoute(route);

					:highlight(lang='javascript')
						// Pasamos los parámetros para la creación del objeto route al método addRoute. 
						// Se crea y añade al entorno simultáneamente

						ENV.addRoute(
							{
								id: 'home',
								path:'/'
							},

							function(gw){
								gw.send("Hola Mundo");
							});


					.msg.msg-icon.bg-alert La segunda forma de creación no admite anidación de distintos objetos tipo Route.

		
			//- Method
			section.method
				h3#method-getRoute: code
					small ENV
					| .getRoute()

				//- Method description
				section.description
					:marked
						Captura un objeto tipo route hijo.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.getRoute( route id );

					:marked
						+ *route id*: **String** identificador del objeto route.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var route = ENV.getRoute("home");

			//- Method
			section.method
				h3#method-moveRoute: code
					small ENV
					| .moveRoute()

				//- Method description
				section.description
					:marked
						Mueve en la lista de objetos route, el orden del route. Para más información acerca de la lista de objetos route consultar la Clase Route.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.moveRoute();

					:marked
						+ *route id*: **String** identificador del objeto route.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var route = ENV.moveRoute();
			
			//- Method
			section.method
				h3#method-removeRoute: code
					small ENV
					| .removeRoute()

				//- Method description
				section.description
					:marked
						Elimina un objeto tipo Route hijo. Toma como parámetro el id del route previamente creado. Al eliminar un objeto route de ENV éste dejará de estar disponible en la aplicación, por lo tanto la ruta configurada en path no estará disponible. Podremos volverlo a conectar mediante el método addRoute().

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.removeRoute( route id );

					:marked
						+ *route id*: **String** identificador del objeto route.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						ENV.removeRoute("home");

			//- Method
			section.method
				h3#method-addPlugin: code
					small ENV
					| .addPlugin()

				//- Method description
				section.description
					:marked
						El método `.addPlugin()` añade un objeto de la Clase Plugin a la aplicación.

						Acepta como parámetro el objeto plugin creado previamente o la configuración para la creación del mismo.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.addPlugin( plugin );

					:marked
						+ *plugin*: **objeto plugin** creado previamente.

					codesyntax.
						ENV.addPlugin( plugin configuration , handler );

					:marked
						+ *plugin configuration*: configuración para la creación del plugin.
						+ *handler*: manejador que ejecutará el plugin.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Creación del objeto plugin
						var plugin = new Plugin(
							{
								id: 'pluginOne'
							}, 
							function(gw, next){
								//...
								next();
							}
						);
						
						//Adicción del objeto plugin al entorno
						ENV.addPlugin(plugin);

					:highlight(lang='javascript')
						//Parámetros para la creación del plugin pasados a addPlugin
						//Creación y adicción simultánea.
						ENV.addPlugin(
							{
								id: 'pluginOne'
							},

							function(gw,next){
								//...
								next();
							});

			//- Method
			section.method
				h3#method-getPlugin: code
					small ENV
					| .getPlugin()

				//- Method description
				section.description
					:marked
						Captura un objeto tipo Plugin. 

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.getPlugin( plugin id );

					:marked
						+ *plugin id*: **String** identificador del objeto plugin.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var plugin = ENV.getPlugin("pluginOne");

			//- Method
			section.method
				h3#method-movePlugin: code
					small ENV
					| .movePlugin()

				//- Method description
				section.description
					:marked
						Mueve en la cadena de plugins el plugin especificado a otra posición. 

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.movePlugin( );

					:marked
						+ *plugin id*: **String** identificador del objeto plugin.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var plugin = ENV.movePlugin("pluginOne");


			//- Method
			section.method
				h3#method-removePlugin: code
					small ENV
					| .removePlugin()

				//- Method description
				section.description
					:marked
						Elimina un objeto tipo Plugin del entorno. Toma como parámetro el id del plugin previamente creado.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.removePlugin( plugin id );

					:marked
						+ *plugin id*: **String** identificador del objeto plugin.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						ENV.removePlugin("pluginOne");

			//- Method
			section.method
				h3#method-add: code
					small ENV
					| .add()

				//- Method description
				section.description
					:marked
						Añade un objeto de la **Clase Route** o un objeto de la **Clase Plugin**. Es un método de ahorro de escritura para el desarrollador.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.add( route );

					:marked
						+ *route*: **objeto route**.

					codesyntax.
						ENV.add( plugin );

					:marked
						+ *plugin*: **objeto plugin**.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var route = new Route(function(gw){
							gw.send("Hola Mundo!");
						});

						ENV.add(route);


						var plugin = new Plugin(function(gw,next){
							next();
						});

						ENV.add(plugin)

		
			//- Method
			section.method
				h3#method-encrypt: code
					small ENV
					| .encrypt()

				//- Method description
				section.description
					:marked
						Método para encriptar datos. Devuelve el parámetro encriptado.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.encrypt(string);

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var encryptedData = ENV.encrypt( decryptedData );

			//- Method
			section.method
				h3#method-decrypt: code
					small ENV
					| .decrypt()

				//- Method description
				section.description
					:marked
						Método para desencriptar datos. Devuelve el parámetro desencriptado.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.decrypt(string);

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var decryptedData = ENV.decrypt( encryptedData );


			//- Method
			section.method
				h3#method-configure: code
					small ENV
					| .configure()

				//- Method description
				section.description
					:marked
						El método `.configure()` permite setear en un solo objeto toda la configuración del entorno.

				//- Method syntax
				section.syntax
					h4 Sintaxis y ejemplo
					:highlight(lang='javascript')
						ENV.configure({
							debug : true,
							directories:{
								uploads:'./uploads',
								temp:'./temp'
							},
							templates:{
								cache:false
							},
							languages : ['es','en'],
							administrator:{
								mail:'administrator@domain.com',
								firstname:'Name',
								lastname:'Surname'
							},
							server:{
								port:3000,
								timeout:10*1000
							},
							database:{
								store:'databaseName'
							},
							smtp: {
								service: 'gmail',
								auth: {
									user: 'myuser@gmail.com',
									pass: '******'
								}
							}
						});

					




			//- Method
			section.method
				h3#method-resolve: code
					small ENV
					| .resolve()

				//- Method description
				section.description
					:marked
						Devuelve una ruta absoluta sobre un directorio relativo respecto al directorio de ejecución de la librería `pillars`. 

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.resolve( directory );

					:marked
						+ *directory*: **String** del directorio relativo.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var pathStatic = ENV.resolve('./static');


		//- Eventos
		section.events
			h2#events Eventos

			section.event
				h3#property-event-languages: code
					| languages

				:marked
					Cuando la propiedad `.languages` es seteada se emite el evento **'languages'**. 

				:highlight(lang='javascript')
					//Capturar el evento
					ENV.on('languages');

				h3#property-event-database: code
					| database

				:marked
					Se emite el evento **'database'** cuando la conexión a la base de datos es seteada.

				:highlight(lang='javascript')
					//Capturar el evento database con callback
					ENV.on('database' , function(){
						ENV.database.getCollection('sessions');
					});


		//- Variables Globales
		section.vblesglobales
			h2#vblesglobales Anexo - Variables Globales

			:marked
				Cuando se realiza la llamada a la librería `require("pillars")`, se setean una serie de variables y métodos globales. 

				Inicialmente `require("pillars")` setea de forma global el objeto `ENV`, el entorno de la aplicación, que también es devuelto por la misma llamada.

			:highlight(lang='javascript')
				//Realizar la inclusión de la librería de esta forma: 
				require("pillars");

				//Sería igual que realizarlo de esta otra forma
				ENV=require("pillars");

			:marked
				Adicionalmente **setea de forma global los siguientes métodos**, alias de los indicados: 

				+ **addRoute()** alias de [ENV.addRoute()](#method-addRoute)

				+ **getRoute()** alias de [ENV.getRoute()](#method-getRoute)

				+ **removeRoute()** alias de [ENV.removeRoute()](#method-removeRoute)

				+ **addPlugin()** alias de [ENV.addPlugin()](#method-addPlugin)

				+ **getPlugin()** alias de [ENV.getPlugin()](#method-getPlugin)

				+ **removePlugin()** alias de [ENV.removePlugin()](#method-removePlugin)


				También **setea de forma Global las Clases**: 

				+ **Route**. De esta forma podemos declarar el constructor como: `route = new Route()`.

				+ **Plugin**. De esta forma podemos declarar el constructor como: `plugin = new Plugin()`. 

				 

				Y las librerías: 

			.msg.msg-icon.bg-info Estamos completando la referencia. ¡Disculpa las molestias!. Síguenos en las redes sociales para estar al tanto de las actualizaciones en la documentación. 
			//
				+ modelator
				+ mailer 
				+ **renderer**
				+ cron ??
					




			