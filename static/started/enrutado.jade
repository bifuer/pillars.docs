include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Getting started',url:'/reference/'},{label:'Clase Route',url:'/reference/route.jade'}];
	+starting-layout("Pillars.js Performance - Clase Route - 'make it easy!'",path)

		#title
			h1 Enrutado
				em  Comenzando con Pillars.js			

		//- Summary
		section.summary
			h2#summary Sumario
			:marked
				Por cada **controlador de ruta** a habilitar en el proyecto, creamos un *objeto route* y lo añadimos al proyecto en la propiedad: *project.routes*.
 
				+ Objetos de la [Clase Route](clase-route.jade). Cada *objeto route* se instancia con una *configuración determinada* y un *handler* o *manejador*.

			:highlight(lang='javascript')
				var myRoute = new Route(
				// Objeto de configuración
				{ 
					id: 'hello',
					path: '/',
					method: ["GET","POST"]
				}, 
				// Manejador de la petición
				function(gw){ 
					gw.send("Hello World!");
				});

			:marked
				
				
				+ `project.routes`, estructura que contiene el árbol de controladores disponibles en el proyecto. En esta propiedad se añadirán los objetos Route:
			:highlight(lang='javascript')
				project.routes.add(myRoute);

			:marked
				También se puede crear el **controlador de ruta** de forma abreviada y sin necesidad de declarar una variable:
			:highlight(lang='javascript')
				project.routes.add(
					new Route(
						{ 
							id: 'hello',
							path: '/',
							method: ["GET","POST"]
						}, 				
						function(gw){ 
							gw.send("Hello World!");
						}
					);
				);

			:marked

		section.instacia-objeto-route
			h2#instancia-objeto-route Instancia del objeto route
		
			:codesyntax
				var myRoute = new Route( configuration, handler );
			:marked
				Los **parámetros de configuración** juegan un papel determinante, ya que:
				+ Si la petición de usuario coincide con unos parámetros de configuración determinados, se ejecutará el manejador.
				+ Si establecemos unos parámetros de configuración determinados, podrá *activar* plugins.

		section.ejecucion-handler
			h3#ejecucion-handler Configuración route y petición
			:highlight(lang='javascript')
				var myRoute = new Route({
						id:'home',

						//Parámetros de configuración que determinan la ejecución del manejador
						path:'/',
						port:'8080',
						method:'',
						active: true,
						https: false,

						//Otros parámetros de configuración
						multipart:false,
						maxUploadSize: 5*1024*1024,
						cors: false,
						session:false
					},
					function(gw){
						gw.html("Hola Mundo");
					}
				);
			:marked
				+ **id**. Identificador del objeto. Será necesario si posteriormente queremos capturar el objeto para por ejemplo modificar el comportamiento en *caliente*.
				+ **path**. Si el path de la petición no coincide con el del *objeto route* no se ejecutará el *manejador*. 
				+ **active**. Si el *route* no está activo, no responderá a ninguna solicitud.
				+ **port**. Si el puerto de la petición no coincide con el declarado en la configuración del *route*, no se ejecutará, emitiendo un Error 404. 
			:highlight(lang='javascript')
				// Iniciamos el servicio http en el puerto 3002
				project.services.get('http').configure({port:3002}).start();

				// Creamos e iniciamos otro servicio http en el puerto 3003
				project.services.add((new HttpService({
				  id:'http2',
				  port: 3003
				})).start());

				// Configuración del objeto route para que sólo responda en el puerto 3002
				var myRoute = new Route({id: 'idRoute',port: 3002},function(gw){
				  gw.send("Sólo funciona en el puerto 3002");
				});

				// Adicción del objeto al proyecto.
				project.routes.add(myRoute);
			:marked
				De esta forma podremos crear servicios *http* en diferentes puertos, y establecer qué se ejecutará en cada uno. 

				+ **host**. Si la petición no va dirijida al host definido en el parámetro `.host`, emitirá un error 404, Not found.
			:highlight(lang='javascript')
				var myRoute = new Route({host: 'localhost'},function(gw){
				  gw.send("Sólo funciona para peticiones a localhost");
				});

				project.routes.add(myRoute);
			:marked
				En el caso del ejemplo, si realizamos una petición a http://127.0.0.1, devolverá un error 404.

				+ **method**. Especifica el método que acepta el *route*, por lo que si la petición se realiza mediante un método diferente al/los definido/s emitirá un error 404.
				+ **https**. Especifica si el objeto acepta peticiones *http*, *https* o ambas. Si la petición se realiza por un protocolo diferente al especificado, emitirá un error 404.

				> Solo los parámetros de configuración definidos en esta sección determinarán si se ejecuta el *handler* o no.


		section.mod-parametros-config
			h3#mod-parametros-config Modificación en caliente de parámetros de configuración
			:marked
				Todos los **parámetros de configuración** de un objeto route son modificables en caliente, es decir, con la aplicación iniciada y sin necesidad de pararla.
			:highlight(lang='javascript')
				// Modificación de un sólo parámetro
				project.route.get('hello').method = 'GET';

				//Modificación de varios parámetros a la vez
				project.route.get('hello').configure({
					method: 'GET',
					port: 8081
				});

			:marked

		
			:marked
		//- Description
		section.uso
			h2#uso Propiedad project.routes
			:marked
				`project.routes` contendrá todos los objetos route creados y añadidos al mismo.
				Es de tipo [ObjectArray](https://github.com/pillarsjs/ObjectArray), por lo que dispone de métodos para añadir, buscar y eliminar objetos. 

			:highlight(lang='javascript')
				project.routes.add(myRoute); 	// Añade el objeto route myRoute
				project.routes.get('hello'); 	// Obtiene el objeto route con id hello
				project.routes.remove('hello'); // Elimina el objeto route con id hello
			:marked
				> Más info: Métodos de [`project.routes`](../reference/project.jade#property-routes).				 