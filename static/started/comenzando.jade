include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Getting started',url:'/started/'},{label:'Instalación',url:'/started/instalacion.jade'}];
	+starting-layout("Pillars.js Getting started - Instalación - 'make it easy!'",path)

		#title
			h1 Comenzando
				em  con Pillars.js
			
		//- Summary
		section.instalacion
			h2#instalacion Instalación			
			:marked
				Si no tienes instalado Node.js, puedes hacerlo desde [aquí](http://nodejs.org).

				Crea un directorio de trabajo, y crea dos archivos:
				+ **package.json**. En el que se describen datos como; autoría, dependencias y colaboradores de la aplicación.
				+ **app.js**. Aplicación en node.js.

				Un archivo package.json sencillo, será donde se describan sólo las dependencias y algunos datos de la aplicación Node.js.
			:highlight(lang='javascript')
				// package.json file
				{
					"name": "myApp",
					"description": "",
					"version": "0.0.1",					
					"dependencies": {
						"pillars": "*"
					},
					"main": "./app.js"
				}

			:marked
				Ahora en el **archivo app.js**  vamos a escribir el código de un sencillo "Hola Mundo". No vamos a configurar nada, por lo que **quedarán establecidas las configuraciones por defecto**, como es el puerto en el que responderá la aplicación *(puerto 3000)*: 
			:highlight(lang='javascript')
				// app.js file
				//Inclusión de la librería pillars
				var project = require('pillars');

				//Inicio del servicio http
				project.services.get('http').start();

				//Creación del controlador de ruta
				project.routes.add(new Route(
					//Configuración del controlador
					{
						id: "idControlador",
						method: ["GET","POST"],
						path: '/'
					},
					//Manejador de la petición
					function(gw){
						gw.html("Hola Mundo!!");
				}));

			:marked
				> En principio, puedes ver en el código de app.js que hay cosas como Route, routes, project, gw, etc. En principio, no te rayes, copia y pega el código, estos conceptos los vamos a ver en un momento.

				Una vez guardados los dos archivos con el código especificado arriba (*y Node.js instalado*), es hora de poner el proyecto en marcha. Para ello, desde la linea de comando y en el directorio del proyecto, ejecutamos el comando *>> npm install*.

				**Npm** es el manejador de paquetes por defecto para Node.js. Npm se instala automáticamente junto con Node.js. Mediante el comando *npm install*, obtiene las dependencias del proyecto especificadas en el archivo *package.json*, y las instala en el directorio *node_modules*. Por lo que una vez ejecutado el comando tendrás en este directorio a Pillars.js.

				Seguidamente, ejecutamos la aplicación mediante el comando *>> node app.js*.

				Observa en consola la carga de Pillars.js: 

				![Captura carga Pillars.js](../img/started/carga-pillarsjs.jpg)

				Al no configurar nada, la consola por defecto está en inglés. Puedes ver tu *"Hola Mundo"* en [http://localhost:8080](http://localhost:3000).

				> Pillars.js integra sistema de traducciones, por lo que podríamos visualizar la consola en el idioma deseado, siempre y cuando la traducción al idioma correspondiente esté realizada. [**Colabora** si dominas un idioma en el que no está traducida! :)](https://github.com/pillarsjs/pillars/tree/master/languages)

		section.elementos
			h2#elementos Elementos			
			:marked
					La idea de Pillars.js es que todos los elementos que componen tu aplicación, sean accesibles y modificables en caliente. Entonces... ¿Qué elementos básicos componen una aplicación web en Pillars.js?

					- Los **servicios**, son aquellos que tu aplicación va a tener/servir, por ejemplo el servicio http, un servicio mongoDB, etc. 

					- Los **controladores de ruta**, que no es más que la porción de código que se ejecutará en las determinadas rutas o URLs de la aplicación web. Se construyen con instancias de la clase Route, y se añade esta instancia al proyecto. Veamos el objeto route de forma algo más extendida: 

			:highlight(lang='javascript')
					project.routes.add(
						new Route(							
							{	// Objeto de configuración. Aquí se configura en qué casos actuará con controlador. 
								id:"home",	// El identificador del controlador. Si más tarde 
									//queremos modificarlo, necesitamos saber cómo se llama.
								path:"/suma",	// La ruta o path en la que queremos que se ejecute
								method: "GET",	// El método o métodos que acepta
								port:3000,		// El puerto en el que estará disponible

							},
							// Manejador. Aquí se especifica qué hará el controlador.
							function(gw){
								gw.send("");
							}
						)
					);

			:marked
					
					- **Gangway**, es la pasarela (*de ahí el nombre*)
					- Los **datos de la petición**. Son los datos que vienen en cada petición de usuario, por ejemplo, si un usuario pide cierta URL con datos en el GET (query string), tendremos un objeto con toda esta información. 
					- **Métodos para la respuesta**. Son todos aquellos métodos que podemos usar para enviar datos al cliente.
					- El **middleware**, este concepto es más avanzado, pero para que no se quede en el tintero.. son porciones de código que se pueden ejecutar para toda la aplicación, o solo para varios controladores de ruta con ciertas características. 

					Ahora veamos, paso a paso, qué estamos haciendo:

			:highlight(lang='javascript')
					var project = require('pillars');
			:marked
					Se declara la variable *project* y se iguala a la *librería pillars*. El objeto *project* estará presente en todo el proyecto, en él está contenida toda la información del proyecto y el proyecto en sí. Información como; rutas, middleware y servicios.

			:highlight(lang='javascript')
					project.services.get('http').start();
			:marked
				Pillars.js contiene un servicio http *built-in*, que se captura desde la propiedad *project.services* mediante el método *.get('identificador del servicio')*. Seguidamente lo iniciamos con el método *.start()*
			:highlight(lang='javascript')
				project.routes.add(
					new Route(
						// Objeto de configuración
						{
							id:"home",
							path:"/"
						},
						// Manejador
						function(gw){
							gw.html("Hola Mundo!!");
						}
					)
				);			
			:marked
				Ahora accedemos a la propiedad *project.routes*, que contiene todos los controladores de la aplicación, y le añadimos un nuevo controlador mediante el método *.add()*. 

				Creamos el *objeto route* con *configuración* y *manejador*. La petición de usuario deberá coincidir con la configuración del *objeto route* para que el manejador entre en acción.
			
				Para crear un controlador, creamos una instancia de la clase Route, *var myRoute = new Route(configuracion, manejador)*. [Ver referencia](../reference/clase-route.jade)
				En *objeto de configuración* del objeto route, se configura el identificador del mismo y el path en el que se ejecutará. Por defecto es "/", es por esto que en ejemplos sencillos no habrás visto este objeto de configuración, ya que si va todo por defecto, se pude omitir.
				En cuanto al *manejador* del objeto route; El manejador siempre recibirá el *objeto gangway (gw)*. El método *.html()* del *objeto gw*, envía la respuesta especificada al cliente en formato HTML, y es la última instrucción que se ejecutará.

		section.controlador
			h2#controlador Controlador de ruta
			:marked