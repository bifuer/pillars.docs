include ./.layout.jade
doctype html
html(lang=gw.language)
	+layout("Pillars.js Reference - 'make it easy'",undefined,'home')
		div#cover
			h1 Web Development Framework for
			img#node-logo(src="../img/node-js-white.png",alt="Node.js logo")

			img(src="../img/cover.png",alt="Pillars.js logo")
		div#example
			:highlight(lang='javascript')
						const project = require('pillars'); 

						project.services.get('http').start(); 

						// Object Oriented Server Model, each route is an object
						project.routes.add(new Route({
								method: ["GET","POST"], 
								port: 8080,
								path: "/hello",
								https: false,
								cors: true,	
								session: true 
							},function(gw){
								gw.session.counter = gw.session.counter || 0;
								gw.session.counter++;
								gw.html("Hello!!, your IP is: " + gw.ip + " and this is your visit number: "+ gw.session.counter);
						});
		ul#features-menu
			li 
				a(href="#negotiation-http") HTTP Negotiation
			li 
				a(href="#routing") Routing
			li 
				a(href="#req-res") Request&Response
			li 
				a(href="#middleware") Middleware
			li 
				a(href="#i18n") i18n
			li 
				a(href="#template-engine") Template engine
			li 
				a(href="#cron") CRON


		div#features
			div.white#http
				div.feature
					h2#negotiation-http HTTP Negotiation
						span Stability and functionality

					ul.list
						li Send files with compression, cache management and byte-range. Compatible with streaming and download recovery						
						li Parser of request for form-urlencoded, multipart and json						
						li Automatic control of errors in handlers
						li CORS management by route
						li Automatic response compression
						li Automatic caching negotiation
						li Cookies management and encryption
						li etag encrypted with support for multiple values

				//
					div.tutos 
							p TUTORIALES
							ul
								li 
									a Configuración de la aplicación
									a Configuración del servicio HTTP
									a Configuración CORS

			
			div.pink#rutas
				div.feature
					h2#routing Routing
						span Dinamic routing

					ul.list
						li Live access to all controllers						
						li All controllers are in <strong>project.routes</strong>
						li Each controller is an object						
						li Convention before configuration
						li Add, modify, remove or deactivate controllers while server is running
						li Better organization of features in <strong>controllers trees</strong>						
						li Controllers naming; offers organization and control over environment
						li Middleware and Controllers communication
					

					:highlight(lang='javascript')
							// Add object route to project.routes
							project.routes.add(new Route({
									id:"home",
									path:"/web",
									method:["POST"|"GET"]
								},function(gw){
									gw.send("Hello from the other side");
							}));

							// Get a controller and deactive it
							project.routes.get("home").active = false;

							// Remove a controller
							project.routes.remove("home");
				//
					div.tutos
						p TUTORIALES
						ul
							li
								a Configuración de ruta
								a Activar/Desactivar rutas en caliente								
								a Rutas Parametrizadas								

				
			div.white#gw
				div.feature
					h2#req-res Gangway
						span Request and Response
				
					ul.list
						li Gangway is the way. Forget native request and response. Gangway is a mix of both, offering vitaminized properties and methods.
						li With just gw.file(), you do streaming!

					:highlight(lang='javascript')
							const myRoute = new Route(
								{
									id:"users"
									path:"/users"
								},
								function(gw){
									const ip = gw.ip;			// IP address of the request
									const POST = gw.content.params;	// POST of the request
									const GET = gw.query;			// GET of the request
										/*
										GET:{
														id: '37',
														value: 'lipsum'
										}
										*/
									const cookie = gw.cookie;		// Cookie of the request
									const method = gw.method;		// Request Method  
									const browserLang = gw.language;	// First language of the client browser
									const userAgent = gw.ua;
										/*
										ua:{ 
														mobile: false,
														os: 'Windows NT 6.1; WOW64',
														engine: 'Blink',
														browser: 'Chrome'
										}
										*/
									const cors = gw.cors;		// Management of crossed origins
									const encoding = gw.encoding;	// Encoding that is used for sending to client

									gw.send("Hello from the other side");

								}
							);
				//
					div.tutos
						p TUTORIALES
						ul						
							li 
								a GET y POST								
								a Métodos para la respuesta
								a Cookies
								a Video Streaming

					
					

			//div.pink#services
				div.feature
					h2#gestion-servicios Gestión de Servicios
							span Servicios centralizados

					ul.list
						li Centralización de servicios en la propiedad <strong>project.services</strong>
						li Posibilidad de añadir, modificar o eliminar servicios.
						li Servicio http build-in
						li Añade, modifica o elimina servicios en caliente.

					
					:highlight(lang='javascript')
							const project = require('pillars');

							// Modificación de la configuración del plugin built-in http
							project.services.get('http').configure({
								timeout: 8000;
								port: 3001;
							}).start();	

				//
					div.tutos
						p TUTORIALES
						ul
							li
								a Manejo de los servicios
								a MongoDB
								a Servicio https
								

			div.pink#middleware
				div.feature
					h2#middleware Middleware
						span Vitaminized Middleware

					ul.list
						li <strong>Middleware</strong> allows extend controllers posibilities and modify working
						li Middleware naming: gives you organization and control over environment
						li All middleware are an object and is in<strong>project.middleware</strong>
						li Can add, modify, remove or deactivate middleware while server is running
						li PillarsJS has built-in middleware
						li Can create middleware and decide where to run it
						
					:highlight(lang='javascript')
							const project = require('pillars');

							project.middleware.add(new Middleware({
									id:"idMiddleware",
									active: true
								},function(gw,next){
									// Do something
									next();
								});


				
				//
					div.tutos
						p TUTORIALES
						ul
							li
								a Manejo de los plugins
								a Ejecución de plugins en objetos route determinados								

			div.white#i18n
				div.feature
					h2#i18n i18n
						span Efficient internationalization

					ul.list
						li Textualization library
						li Full i18n integration
						li Implements multiple languages without modifying the code of the app
						li Translation sheets in JS/JSON
						li Language management of the automatic request
						li Multi-language routes :-)


				//
					div.tutos
						p TUTORIALES
						ul
							li
								a Hola Mundo en 5 idiomas


			div.pink#templated
				div.feature
					h2#template-engine Template engine
						span User your favourite engine
					
					ul.list
						li Support to different template engines
						li Automatic and optimized rendering
				//
					:highlight(lang='javascript')
						
				//
					div.tutos
						p TUTORIALES
						ul
							li
								a Hola Mundo en 5 idiomas


			div.white#cron
				div.feature
					h2#cron CRON
						span Scheduled Library

					ul.list
						li Scheduled tasks through CRON thanks to the Scheduled library
						li Access to all the tasks scheduled in the project
						li Live access to scheduled tasks: modify, remove...
					
				//
					:highlight(lang='javascript')
						var hola
				//
					div.tutos
						p TUTORIALES
						ul
							li								
								a Tareas programadas								

			//div.pink#logs
				div.feature
					h2#logs Logs
						span Librería crier
					ul.list
						li Sistema de creación de logs para la monitorización de aplicación, librerías, etc.

		//
			div.pink#dependencies
				div.feature
					h2#dependencias Robustez
						span Dependencias propias

					ul.list
						li Código robusto. Todas las dependencias han sido creadas, y son mantenidas, por el mismo equipo
					
				
		//
			div.pink#jailer
				div.feature
					h2#jailer Permisos de acceso
						span Librería jailer				
					ul.list
						li Crea diferente perfiles de acceso a rutas
						li Gestiona los diferentes tipos de permisos: lectura, escritura o ...
					

					:highlight(lang='javascript')
						var hola

					div.tutos
						p TUTORIALES
						ul
							li
								a Perfiles de acceso
								a Permisos

			div.white#procedure
				div.feature
					h2#procedure Asincronía
						span Librería Procedure
									
					ul.list
						li Programación de tareas mediante CRON gracias a la librería Scheduled
						li Acceso a todas las tareas programadas en el proyecto
					

					:highlight(lang='javascript')
						var x = 0;
						
						function suma(){
							x++;
						}

						var procedure = new Procedure();

						procedure
							.add('Proceso-Hijo-1',suma)
							.add('Proceso-Hijo-2',suma)
							.add('Proceso-Hijo-3',suma)

							.queue()

							.launch(function(errors){
								if (errors){
									console.log("END[ERROR]",arguments);
								}else{
									console.log("END[OK]",arguments);
								}
							});

					div.tutos
						p TUTORIALES
						ul
							li
								a Carrera de procesos
								a Cola de procesos
								a Pasar parámetros de procesos a procesos
								a Mix de carreras y colas
