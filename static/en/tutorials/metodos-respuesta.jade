include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Tutorials',url:'/pillars/tutorials/'},{label:'Servidor-Cliente',url:'/pillars/tutorials/server-client.jade'}];
	+tutorials-layout("Pillars.js Tutorials - Env√≠o de datos de Servidor a Cliente - 'make it easy!'",path)

		#title
			h1 Answer Methods
				em  Pillars.js Tutorials
		

		//- Summary
		section.summary
			h2#summary Summary
			:marked
				Data client sends its always inside the handler in a route object, and always is the last call inside it.

				Methods that sends things to the client , and compose the HTTP headers, are methods of gangway object
				
				+ [gw.send()](../reference/gangway.jade#method-send). If the response is a string, it's sent as *text/html* and if it's an object it is sent as parsed object *application/json* type.
				+ [gw.html()](../reference/gangway.jade#method-html). Sends the response to the client parsed as *text/html*
				+ [gw.text()](../reference/gangway.jade#method-text). Sends the response to the client parsed as *text/plain*
				+ [gw.json()](../reference/gangway.jade#method-json). Sends the response to the client parsed as *application/json*
				+ [gw.render()](../reference/gangway.jade#method-render). This method allow send a renderized template to the client. It uses the Templated library.
				+ [gw.file()](../reference/gangway.jade#method-file). Supports bye-serving, so it can stream video.
				
				This methods ends the gangway object. Once the method has been executed, any code after won't be executed
				

		//- Examples
		section.usos
			h2#usos Uses

			//- Example
			section.render
				h3#render Templated, Cache and Optimization
				:marked
				
					If we are using rendering engines, we'll use method `gw.render(template)` to send the template. This method renders the template only in the first request to optimize server process timings
				
					This method uses the `project.renderReload` property, that is false by default, so... if we don't change it to true, the temlate only will be rendered in the first request while is non changed, if the template is changed will be rendered again, if we set the property to true, it will be rendered every single request.				
				:highlight(lang='javascript')
					const project = require("pillars");

					project.services.get("http").start();

					project.routes.add(new Route(function(gw){						
						gw.render("template/user.jade");
					}));
				

			//- Example
			section.json
				h3#json reply json
				:marked
					The json file must be formatted, and we only have to call `gw.json(file)`
					
				:highlight(lang='javascript')
					const project = require("pillars");

					project.services.get("http").start();

					project.routes.add(new Route(function(gw){
						let myJSON = {
							name: "Charles",
							surname: "Madison",
							age: 32
						};
						gw.json(myJSON);
					}));


			//- Example
			section.example
				h3#example-3 Very big files send
				:marked
					They are sent using `gw.file()`.
					
					Depending on the project configuration in `project.maxCacheFileSize`, 5MB by default, if the file is bigger, won't be compressed and will no go to the cache, but if is smaller, will be compressed and will be stored in cache before send it.
					
					If a file goes to the cache, the next requests about it won't read the hard disk, before send it back, Pillars, will performe some checks to ensure the file has not been modificated in the meanwhile, if the file has been compromised or modifed it will be read from the hard disk again.
					
					Remember that `gw.file()` only has three parameters,[review](../reference/gangway.jade#method-file). 
					
				:highlight(lang='javascript')
					const project = require("pillars");

					project.services.get("http").start();

					project.routes.add(new Route(function(gw){					
						gw.file("files/document.pdf");
					}));


			//- Example
			section.streaming
				h3#streaming Video Streaming
				:marked
					byte-serving is implemented, so, when you send a video it will be a streaming				

				:highlight(lang='javascript')
					const project = require("pillars");

					project.services.get("http").start();

					project.routes.add(new Route(function(gw){					
						gw.file("files/movie.avi");
					}));

			//- Example
			section.cookies
				h3#cookies Cookies
				:marked
					To work with cookies we have:
					+ [gw.setCookie()](../reference/gangway.jade#method-setCookie), Gangway method to set a cookie. when one of the previous methods are executed to send some data,the cookie will be added to the response.
					+ [gw.cookie](../reference/gangway.jade#property-cookie). Property where the recieved cookies are seted or... cookies the client sent to us.

				:highlight(lang='javascript')
					const project = require("pillars");

					project.services.get("http").start();

					project.routes.add(new Route(function(gw){					
						gw.setCookie({
							id: 123,
							name: "Adele"
						});

						gw.send("Hola tu cookie es: " + gw.cookie);
					}));