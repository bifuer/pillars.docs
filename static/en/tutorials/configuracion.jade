include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Tutorials',url:'/tutorials/'},{label:'App configiguration',url:'/tutorials/configuracion-aplicacion.jade'}];
	+tutorials-layout("Pillars.js Tutorials - App configiguration - 'make it easy!'",path)

		#title
			h1 App configiguration
				em  Pillars.js Tutorials
			
		section.descripcion

			:marked
				When we make the Pillars.js require `var project = require("pillars")`, **an object is returned**, wich is being setted in `project`.

				Every 'pillars' require will return the same instance. Every Pillars.js library is loaded in [singleton mode.](http://es.wikipedia.org/wiki/Singleton)
            	
				`project` has an **minimal initial configuration**, *configuration convention*, so you don't need to worry about configuring your project in the beggening. Anyway lets see in this section wich project properties we can configure, where are they and their relationship with other Pillars.js elements.
				Project can be configured by the `project.configure()` method, giving the necessary configuration object, or configuring it property by property, wich we can access in the `project.config` property

				Everything here exposed can be found in the [reference](../reference/project.jade#property-config) using a more technological lenguage

			:highlight(lang='javascript')
				const project = require("pillars");

				project.config.debug = true ;

				project.configure({
					debug: true,
				 	renderReload: true
				});

			:marked
		section.directorios
			h2#directorios Directories
			:marked
				When you craft a Pillars.js aplication two directories are added to the **node_modules** directory
				+ **logs**, directory where logs are storaged in case you have the log system on, it is activated setting `.logFile` property to **true** 
				+ **temp**, directory where temporal files are storaged,* for example, files uploaded throw post method*

		section.maxUploadSize
			h2#maxUploadSize Upload File
			:marked
				the **maximum file size** is setted **globally** for the project this way:
			:highlight(lang='javascript')
				const project = require("pillars");
				project.config.maxUploadSize = 5*1024*1024; // 5MB - maximum file size
			
			:marked
				This doesn't mean it has to keep this limit in the whole app, because this global configuration can be redifined in single controller or controllers (local > global)

			:highlight(lang='javascript')
				const project = require("pillars");
				
				project.routes.add(new Route({
						id:"upload-archivos-pesados"
						method: ["POST","GET"],  // accepting POST and GET
						multipart: true,  // setting we accept files
						maxUploadSize: 25*1024*1024  // configuring the limit to 25MB.
					},function(gw){
						const myFile = gw.files;
						//...
						gw.send("File sent and saved");
				}));
			:marked
				This files are temporary storaged in `/temp` folder, *(activated by the BodyReader middleware, wich is the one that reads the request body in the POST requests)*
			:highlight(lang='javascript')
				const project = require("pillars");
				project.middleware.get("BodyReader").tempDirectory = "./anotherFolder";
				
			:marked

		section.templating
			h2#templating Templating
			:marked
				[templated](https://github.com/pillarsjs/templated) is one of the libraries icorporated to Pillars.js

				This allow us to add the **template engine** we like most to Pillars.js. In other words is an **Multi template engine manager**.

				Some templating behaivours must be global to the application, so we have properties in `project` pointing to this behaivours.

			:highlight(lang='javascript')
				const project = require("pillars");
				project.configure({
					renderReload: true, // Compiles the template first time needed and storage it on cache.
					directoryTemplate: "template.hbs", // template for folder listing.
					errorTemplate: "templateError.hbs" // error pages template.
				});

			:marked
				
		section.debug
			h2#debug Debug Mode
			:marked
				Activating Debug Mode we will see additional information in console errors.
			:highlight(lang='javascript')
				const project = require("pillars");
				project.config.debug = true;
			:marked
				**false** by default.
		
		section.cors
			h2#cors CORS
			:marked
				This is used to configure CORS. set CORS to "true" to accept any CORS query. Set CORS to "false" to deny any CORS query. Set a strings array to accept only domains contained in the array. CORS is **false** bye default.
			:highlight(lang='javascript')
				const project = require("pillars");
				project.config.cors = ["www.smartloop.es"];


		section.favicon
			h2#favicon favicon
			:marked
				Set the favicon:
			:highlight(lang='javascript')
				const project = require("pillars");
				project.config.favicon = "img/favico.ico";
			:marked

		section.logfile
			h2#logfile Sistema de logs
			:marked
				Pillars.js has a log system deactivated by default, you can activate them setting `.logFile` to **true**.
				Once activated, logs files with all the queries information done to the server, will be storaged in the **logs** folder.
			:highlight(lang='javascript')
				const project = require("pillars");
				project.config.logFile = true;

		section.cache
			h2#cache Optimizaci√≥n RAM
			:marked
				Pillars.js can configure the cache system, this allow optimize RAM usage.

				**How the cache system works?** 

				A maximum cache size is defined for the application, 250MB by default, In this space, files, templats,etc... are cached, so every file sent because of an HTTP query. So we have a cache with requested files.

				**Wich are the PROS?**

				Avoiding hdd or sdd disk reading when the file hasn't been modified, sending this cache file instead.

				**is the cache cleaned while the app is working?**

				Of course, when the cache get the maximum a cleaning rules are triggered, for example, clean up the less used files.

			:highlight(lang='javascript')
				const project = require("pillars");
				project.configure({					
					maxCacheFileSize: 5*1024*1024, // 5MB - Maximum size for single file.
					cacheMaxSamples: 100, // Heuristic data about files uses 
					cacheMaxSize: 250*1024*1024, // 250MB - Maximum cache size
					cacheMaxItems: 5000, // Max number of elements in cache
				});


			:marked

