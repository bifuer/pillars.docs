include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Tutorials',url:'/tutorials/'},{label:'Controladores',url:'/tutorials/controladores.jade'}];
	+tutorials-layout("Pillars.js Tutorials - Controladores - 'make it easy!'",path)

		#title
			h1 Controllers
				em  Pillars.js Tutorials

		section.cache
			h2#Introduccion Introduction
			:marked
				** route controllers ** are added to the project for add a functionality to a given path.

				You can create a controller instancing the **Route Class** and adding to it the `project.routes` property using the method `.add()`

				`project.routes.add(new Route(configuracion, handler));`

			:marked
				In this chapter we are going to have a general vision, to go deeper go to the [reference]("../reference/enrutado.jade").

		section.creacion
			h2#creacion Controller Creation
			:marked
				The object is instanced with two parameters, *config* and *handler*
				*Config* is an object, and *handler* is an anonimous function
			:highlight(lang='javascript')
				const myRoute = new Route({
					id :"example",
					path: "path-example",
					method:["GET","POST"]
				}, function(gw){
					gw.send("Hello from path example");
				});
				project.routes.add(myRoute);

			:marked
				The route object configuration has many options, we will see it in the next chapter.

				The *handler* will receive always the **gangway** parameter, it's a Pillars.js object that merges request and response parse them and skyrocket them.



		section.configuracion
			h2#configuracion configuration
			:marked
				The **object route configuration** is the first parameter passed when it is instanced. It's optional and It's an object, if not passed the object will take the default configuration

				In the next example, we will see all the configurables properties, and we will focus too on wich properties must match with the request in order to the controller manage it.

			:highlight(lang='javascript')
					project.routes.add(new Route({
							  // Controller configuration. In which cases will work

							  id:"home", /* controller identification. if we want
							  to modify it later, we need to know the id .*/
							  active: true, /* true: answering queries, false: not answering */

					  /* ---- Which parameters must be match the query to be answered
							  */
                              path:"/suma", /* Route where we want it to be executed */
							  method: "GET", /* Accepted method (string) or methods (array) accepted,
							  can accept various methods */
							  port:3000, /* working port. if not setted,
							  will work in any port */
							  host: undefined, /* hostname where it will answer, undefined will answer to everthing.
							  If you set "localhost" visiting 1127.0.0.1 wont work
							  */
							  https: false, /* if manage only http, only https or both*/

					  /* ---- adicional parameters,
					  		  not necessary to match the query */	
							  multipart: false, /* If it accepts multipart sending, necessary to receive files*/
							  maxUploadSize: 0, /*  maximum file size if is accepted*/
							  cors: true, /* if cors query are accepted or not, allowed url can be especified */
							  session: false /* if we allow sessions*/
						},

						/* Handler. is the 'code snippet' executed,
						if the query match the mandatory configuration
						described above */
						function(gw){ /*the handler always need a gw*/
							gw.send("Hello Pillars");
						}
					));

					/* Look carefuly and you will realize that the route object is added on the fly 
					using project.routes.add() */

		section.manejador
			h2#manejador Handler
			:marked
				The handler is the second defined parameter when a route object is instanced. It is an anonimous function

				The handler will be executed when the query match with the indicated controller properties.

				Handler will always recieve **gangway**

		section.metodos
			h2#metodos Project.routes methods.
			:marked
				As said before 'project.routes' is a project property where all the project controllers are, so it has methods to add, get or delete:

			:highlight(lang='javascript')
				project.routes.add(myRoute);
				project.routes.remove("example");
				project.routes.get("example");

		section.activar
			h2#activar Modify controller properties
			:marked
				Lets see the example, modify the property `.active`.

				A controller property is '.active'. It is True by default, to deactivate a controller, just set it to false. In this case the controller wont be executed
			:highlight(lang='javascript')
				project.routes.get("example").active=false;



