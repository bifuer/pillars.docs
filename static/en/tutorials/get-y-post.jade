include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Tutorials',url:'/pillars/docs/tutorials/'},{label:'Cliente-Servidor',url:'/pillars/docs/tutorials/client-server.jade'}];
	+tutorials-layout("Pillars.js Tutorials - PeticiÃ³n HTTP - 'make it easy!'",path)

		#title
			h1 Call Methods
				em  Pillars.js Tutorials
		

		//- Summary
		section.summary
			h2#summary Sumario
			:marked
				The HTTP protocol defines 8 call methods: HEAD, GET, POST, PUT, DELETE, TRACE, OPTIONS Y CONNECT, every single one are suported by Pillars.js. In this tutorial we are learning two ways to send data from client to server: 

				+ Query String. *(aka GET)*
				+ Query content. *(aka POST)*
				
				> For more info [HTTP protocl methods](http://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M.C3.A9todos_de_petici.C3.B3n).

				Pillars, can also use personal routes that will be seen in the las part
				


		//- Examples
		section.example-01
			h2#example-01 Query String

			
			:marked
				A Query String is all written in the url after the main url and with this format: "?VARIABLE=VALUE", for example : ?hello=world
				this, will pass the variable hello with the "world" value
				
				this data can be found in the gangway , in [gw.query property](../reference/gangway.jade#property-query)
				

			:highlight(lang='javascript')
				const project = require("pillars");

				project.services.get("http").start();

				project.routes.add(new Route(function(gw){					
					gw.send("Has enviado mediante Query String el valor: " + gw.query['q']);
				}));

				// visits http://localhost/?q=1
				//> sends throug Query String the value: 1
				// gw.query has this object:  { q: '1' }
				


		//- Examples
		section.example-02
			h2#example-02 Query content

			:marked
				A controller only can receive a form throug POST, if is configured in its 'method', remember that at the begenning 'method' = *undefined*,so will accept any query method, If its going to receive files, 'multipart' must be setted as true.
				
				When a form is sent to the server by POST method, data can be found at [gw.content.params](../reference/gangway.jade#property-content).
				

			:highlight(lang='javascript')
				const project = require("pillars");

				project.services.get("http").start();

				project.routes.add({
					method: "POST",
					multipart: true
				},new Route(function(gw){
					gw.content.params
					gw.files
					Where are phisically?
					gw.send("Sent by Query String the value: " + gw.query['q']);
				}));

			:marked
	//			**example of POST query with file**
	