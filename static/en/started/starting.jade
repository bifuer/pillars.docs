include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Getting started',url:'/en/started/starting.jade'},{label:'Get Started',url:'/en/started/starting.jade'}];
	+starting-layout("Pillars.js Getting started - Get Started - 'make it easy!'",path)

		#title
			h1 Starting
				em  con Pillars.js
			
		//- Summary
		section.installation
			h2#installation Installation			
			:marked
				If you haven´t Node.js installed, install from [here](http://nodejs.org).

				Create a directory, and inside create two files:
				+ **package.json**. With data as; authorship, dependencies and collaborators
				+ **app.js**. Node.js application

				A package.json simple file, describe dependencies and other datas as:
			:highlight(lang='javascript')
				// package.json file
				{
					"name": "myApp",
					"description": "",
					"version": "0.0.1",					
					"dependencies": {
						"pillars": "*"
					},
					"main": "./app.js"
				}

			:marked
				Now in **app.js file** copy the code below, is typical:"Hello World!!". In example, **default settings will be stablished**, like port *(port 8080 by default)*: 
			:highlight(lang='javascript')
				// app.js file
				//pillars library
				const project = require('pillars');

				//get htt built-in service and start
				project.services.get('http').start();

				//Add a new controller
				project.routes.add(new Route(
					//Controller configuration
					{
						id: "idController",
						method: ["GET","POST"],
						path: '/'
					},
					//Controller handler
					function(gw){
						gw.html("Hello World!!");
				}));

			:marked
				> In a few lines we will see what the code means

				Once the two files have been saved (*and Node.js installed*), is turn to run the projet. For this, in command line, run:`npm install`.

				**Npm** is the default package manager for Node.js. Npm is installed with Node.js. With `npm install` command, get project dependencies specified in *package.json* file, and install it in directory *node_modules*. Thus, once command runned, you´ll have in this directory to Pillars.js.

				Next, run application with command: `node app.js` in command line.

				Watch in console the load of Pillars.js: 

				![Captura carga Pillars.js](../../img/started/carga-pillarsjs.jpg)

				In sample, we don´t have configured anything (convention over configuration) so console is in english. 
				You can see the example in [http://localhost:8080](http://localhost:8080).

				> Pillars.js integrates translation system, so you can watch console in language you prefer, as long as the translation to the corresponding language is made of course :) [**Collaborate** translating to a language! :)](https://github.com/pillarsjs/pillars/tree/master/languages)

		section.elements
			h2#elements Elements
			:marked
					In this section we are going to overview the elements of Pillars.js. These are: services, routing, gangway and middleware.

					- **services**. All services in the application are in **project.services**.  Services are that services that your application implements; http, https, mongoDB service,..., for example. 

			:highlight(lang='javascript')
					project.services.get('http').start();
					/* Get http services with .get('http') method, from project.services.
					This services has a .start() method, besides of others. To configure port, for example,
					use .configure() method, in this way: */


					project.services.get('http').configure({
						port: 3001,	// Port in which the services responds
						timeout: 8000	/* Time the server is taken before sending 
						error timeout, error HTTP 408 */
					}).start();


			:marked
					Keep in mind that Pillars.js has by default a HTTP service, with id 'http', so we don´t need to add it.

					> How to create a [http/https service](../reference/services.jade)

			:marked
					> If you are not familiar with data from HTTP request, open developers tools in browser, and in network options in Google Chrome, when an URL is requested (with this panel opened), watch when you clic in file request, other panel is opened in right side with information about request. In 'General' and 'Request Headers' can watch what you requests and sent to the server.

					- **Controllers and routing**. A *route controller* is the element that attends to a request, as long as request parameters (request data) match with controller configuration, of course.

					For example, if the request is a GET to '/' path, will attend route controller that is configured in this way. Nevertheless if request is a POST, and controller is configured only to atend GET requests, this controller don´t atend this request.

					A route controller is created with a **Class Route instance** `const myRoute = new Route (...)`, and **add to project** `project.routes.add(myRoute)`. With these two steps you create routing in the application.

					> A route object can be instantiated with **new** word or without it.

					A *route object* is created with a *configuration object* and a *handler*.
					`const myRoute = new Route(configuration, handler)`					

			:highlight(lang='javascript')
					project.routes.add(new Route({
							  // Controller configuration. Here configuration about when this will act.
				
							  id:"home", /* Controller id. To modify controller later you 
							  need to know the id*/
							  active: true, /* if is activated or not. If is deactivated won´t attend any request */

					  /* ---- Parameters that must match with request data, for controller attend request */
							  path:"/suma", /* path on which will act */
							  method: "GET", /* Method or methods that accept, 
							  for several at a time, specify in an array*/
							  port:3000, /* port where controller will respond. If no-configured, anyone */
							  host: undefined, /* hostname where it will respond, undefined for anyone. 
							  Try an example configuring host to localhost and try to visit
							  127.0.0.1, this won´t attend*/
							  https: false, /* if attend http only, https only, or both*/

					  /* ---- Other parameters, 
							  they don´t have why match with the request for it to be attended*/
							  multipart: false, /* if multipart is accepted or not, it is needed to receive files*/
							  maxUploadSize: 0, /* Maximum file size, if accepted*/
							  cors: true, /* if cors is accepted or not. Can specify domains of which accepts requests */
							  session: false /* if sessions activated or not */
						},
						
						/* Handler. This is the code to run when request match 
						with controller configuration specified above */
						function(gw){ /*handler receives gw*/
							gw.send("Hello World");
						}
					));

					/* Note: We have added route object in the same sentence we create it, with project.routes.add() */


			:marked
					In the previous example, *route object* will attend in path **"/suma"**, and print in browser "Hello World".

					> As you have seen, route controller () is instantiated with two parameters; a configuration object (controller configuration), wich will determine whether the handler enters into action or not; and handler, which is the code to execute.

					> Controller configuration can be omitted. In this case, all parameters will have default values.
					
					- **Gangway**, is the gateway between client and server. Gangway **will contain all the data of the request** (*ip, host, url, get o query string, etc.*), **and provide methods to response**, like `gw.json()` to send a json, `gw.file()` to send a file, or `gw.render()` which render a template and send it to client.

					Gangway will be present in route objects handler and in middleware handler.

					An example of information that gangway contain:

			:highlight(lang='javascript')
					project.routes.add(new Route(function(gw){

						const POST = gw.content.params; 

						const files = gw.content.files;

						const GET = gw.query;

						const allParams = gw.params; // All params combined (GET, POST, etc.)

						const cookie = gw.cookie; 

						const userAgent = gw.ua;
						/*
						ua:{ 
							mobile: false,
							os: 'Windows NT 6.1; WOW64',
							engine: 'Blink',
							browser: 'Chrome'
						}
						*/
						const referer = gw.referer;		// URL that link request, if exists
						const ip = gw.ip;			// ip request
						const browserLang = gw.language;	// Language to response 
						const cors = gw.cors; 		// Cross-origin resource sharing
						const method = gw.method;		// Request method GET, POST, HEAD...
						const encoding = gw.encoding; 	// encoding to use for sent to client

						gw.json(gw);
					});
			:marked
					Gangway has a lot of properties and methods, so we recommend that you use reference to get information about all of them.

					- **middleware**, is the concept more advanced if you not know node.js yet. A middleware is a portion of code that is applied to entire application, I mean, in all controllers. In PillarsJS, you can configure a middleware so that runs on sets of controllers.

					Thus, can create a middleware that runs in entire application, in all requests, or only runs in some controllers depending on the configuration of these controllers.

					Creating middleware:

			:highlight(lang='javascript')
				project.middleware.add(new Middleware({ //Middleware configuration
						id: "idMiddleware", /* Middleware id, needed to get it and modify it*/
						active: true /* if is active, thus if runs or not.*/
					},
					/* Handle take two parameters: gangway and next 
					At the end of handler, must call to next() */
					function(gw, next){ 
						console.log("Hello from a middleware");
						next();
					}
				));

			:marked
					Can create a middleware with default configuration, so configuration object can be omitted. 

					In addition, can create a middleware to runs in certain controllers:  

			:highlight(lang='javascript')
				project.middleware.add(new Middleware(function(gw, next){
					if (gw.routing.inheritance.varToMiddleware){
						console.log("Middleware running");
					};
					next();
				}));

				project.routes.add(new Route({
						path:'/middleware',
						varToMiddleware: true
					},function(gw){
						gw.send("Something"); 
					}
				));

				// for each request to /middleware "Middleware running" will be emitted.
			
			:marked
					

		section.env
			h2#env Enviroment setup
			:marked
				Newly seen we have services, route controllers, middleware and gangway, well, all this run in application environment: **project**. Can setup project in diferent ways; on the one hand aspects related to the physical server, 
				some configurations allow to optimize RAM performance *(setup RAM cache allowed)* in addition other aspects related with debug mode, favicon; others related with templated system, like define errors template and more. 

				> [Take a look of the entire list of environment variables](../reference/project.jade#property-config)

			:highlight(lang='javascript')
				project.configure({
					debug: true,
					cors: true,
					cacheMaxSize: 25*1024*1024
				});

				const serverCors = project.config.cors;

		section.dynamic
			h2#dynamic Dynamic
			:marked
				The type of Pillars.js primary elements are [Object Array](https://github.com/pillarsjs/ObjectArray) (OA), this gives to project a magical dynamism. OA is an **Array of objetcs**, this array has methods to handle those objects *(insert, search, move, etc.)*

				The properties of the project that are of type OA are:
				- **project.services**. Where are all the services of the project
				- **project.routes**. Where are all the route controllers of the project
				- **project.middleware**. Where are all the middleware of the project

				The basic methods that we can use over this properties are: 
				- Add a new object `.add(object)`
				- Get an object, id object is needed `.get('idObject')`
				> The infrastructure offers great versatility, *(route, middleware and service)* objects are created with an initial configuration. While application is running, allow get this properties and modify it. Example:  `.get('id').active = false`


				- Remove an object of application: `.remove('idObjeto')`.

				> Keep in mind: if an object is created without an initial configuration specified, this will have default values. So, a lot of propierties will exists with a default values. 

				Thanks to this architecture, we have a homogeneous methodology to create and handle diferent propierties.

			:highlight(lang='javascript')
				/* *** Declaration of: a controller, a middleware and a http service.*** */
				var myRoute = new Route({id:"idRoute"},function(gw){/*...*/});
				var myMiddleware = new Middleware({id:"idMiddleware"},function(gw,next){/*...*/});
				var myHTTP = new HttpService({id:'idHttp'});

				/* *** Use of project.routes - Controllers *** */
				project.routes.add(myRoute);  // Adding a controller to project
				project.routes.get("idRoute").active = false; // Deativating controller
				project.routes.get("idRoute").session = true; // Activating sessions in controller
				// Also can setup several propierties in the same statement with .configure() method
				project.routes.get("idRoute").configure({ 
						active: true,
						session: true
					});
				project.routes.remove("idRoute") // Remove the controller of the project

				/* *** Use of project.middleware *** */
				project.middleware.add(myMiddleware); // Adding Middleware to project
				project.middleware.get("idMiddleware").active = false; // Desativating middleware
				project.middleware.remove("idMiddleware"); // Removing middleware

				/* *** Use of project.services *** */
				project.service.add(myHTTP);
				project.service.get("idHttp").start(); /* Services also have method characteristic of 
				a services, like .start() and .stop().*/

				// In this statement, we get service , setup and start:
				project.service.get("idHttp").configure({
						port: 3000,
						timeout: 8000
				}).start();

		section.nesting
			h2#nesting Nesting
			:marked
				We want to show you, briefly, other infrastructure versatility: **nesting of the route controllers**. In Pillars.js we can **group route controllers** by funcionality *(or something else)*.

				This possibility, give us major control, for example, we can deativate `project.routes.get('idPadre').active = false` of a complete section of the application.

			:highlight(lang='javascript')
				const routeFather = new Route ({id:'idFather'},function(gw){/*...*/});
				const routeSon1 = new Route(function(gw){/*...*/});
				const routeSon2 = new Route(function(gw){/*...*/});

				project.routes.add(routerFather);
				routerFather.routes.add(routeSon1).add(routeSon2);

				project.routes.get('idFather').active = false;


			


			//.msg.msg-icon.bg-alert De aquí en adelante no está desarrollado ni revisado. Aquí puedes parar de leer.

	//
		section.directorio
			h2#directorio Directorio estático
			:marked
				Directoy es un middleware integrado en Pillars.js. Éste nos permite crear un directorio estático de una forma sencilla: 

			:highlight(lang='javascript')
				project.routes.add(
					Route({
						id:'pillarsDocsStatic',
						path:'/*:path',
						directory:{
							path:'./static', // path en el que se montará el directorio estático
							listing:true  // Si permite listados del directorio
						}
					}
				)); // No tiene manejador ;)

			:marked
				En este caso, tu aplicación tendrá el directorio `/static` montado como un directorio estático. Tiene unas ventajas y características dignas de mencionar, y es que Pillars.js implementa un sistema de cacheo excepcional. Éste se encarga de cachear los archivos que se solicitan, de forma que una vez que se pida un fichero, éste no se volverá a leer en disco (siempre y cuando no haya sido modificado), sino que estará en la caché, por lo que se ahorran lecturas de disco. Para controlar y poder configurar datos como: número de archivos  máximo en caché, o tamaño de la caché.

				Esta caché también tiene su propio sistema de limpeza de archivos que no se utilizan.


		section.templating
			h2#directorio Templating
			:marked
				Mustache, Jade, ... Sea cual sea tu templating favorito, puedes usarlo, además **con ventajas** ;)
				Uso.


				Configuración de los templates genéricos para todo el sitio.

				Métodos relacionados con el templating

				Ventajas de Pillars.js respecto al templating



				> De momento está integrado Jade, pero puedes integrar el tuyo y estará disponible para la comunidad ;), puedes ver aquí cómo se integra un templating. 


		section.sesiones
			h2#sesiones Sesiones
			:marked
				Contamos con sesiones con persistencia en memoria, para activarlas en un controlador de ruta determinado, tan sólo hay que establecer el valor **session** a **true** en su configuración.

				> Ejemplo sesiones
			

		section.t12n
			h2#t12n Internacionalización
			:marked
				Pillars.js cuenta con una librería de Internacionalización adicional, puedes encontarla aquí. 
				Esta librería permite contruir un sitio multiidioma mediante hojas JSON.
				Los path de ruta, también son internacionalizables.

				Pillars.js es totalmente internacionalizable. Es posible cambiar de idioma: la consola, las URL's de nuestra aplicación, y por supuesto los mensajes de usuario, en función de la petición del cliente. Esto lo hacemos gracias a la librería textualization la cual realiza una capa de abstracción, entre la programación de la aplicación y los mensajes de usuario, mediante nodos, permitiendo dejar de lado los mensajes de usuario y traducciones mientras se desarrolla. De esta forma se realizan las labores de redacción de mensajes de usuario de forma independiente a la programación en Node.



		section.scheduled
			h2#scheduled Scheduled
			:marked
				Programación de tareas CRON