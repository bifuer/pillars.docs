include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Tutorials',url:'/pillars/docs/tutorials/'},{label:'Ejemplos',url:'/pillars/docs/tutorials/ejemplos.jade'}];
	+tutorial-layout("Pillars.js Tutorials - Ejemplos - 'make it easy!'",path)

		#title
			h1 Primer Contacto
				em  Pillars.js Tutorials
		

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				Las dos formas en las que se pueden enviar datos del cliente al servidor son: 

				+ Query String. *(El conocido GET)*
				+ Contenido de la solicitud. *(El conocido POST)*
				
				En el protocolo HTTP existen varios [métodos de petición](http://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M.C3.A9todos_de_petici.C3.B3n), en concreto 8, aunque usualmente se han usado en el desarrollo sólo GET y POST.

				Además, el framework permite el uso de rutas parametrizadas. 



		//- Examples
		section.examples
			h2#examples Ejemplos

			//- Example
			section.example
				h3#example-1 Ejemplo 1. Primer Contacto.
				:markdown
					El código fuente de este ejemplo está en .... 
				:highlight(lang='javascript')
					require("pillars").start();

					ENV.configure(
						debug:true,
						languages:['es','en'],
						administrator:{
							mail:'youremail@domain.com',
							firstname:'name',
							lastname:'surname'
						},
						server:{
							port:80,
						},
						smtp{
							service: 'gmail',
							auth: {
								user: 'myuser@gmail.com',
								pass: '******'
							}
						}
					);

				:markdown
					En el ejemplo lo primero que hemos hecho ha sido incluir la librería `pillars` y seguidamente ejecutar el método `.start()`. En este punto de la aplicación tenemos en el puerto `3000`, que es el puerto por defecto, el servicio HTTP arrancado, pero como no hemos definido rutas a atender,  si consultamos `/` tendremos como resultado un `Error 404: Not Found`.
					
					Al realizar la inclusión de la librería `pillars`, también estará disponible el **directorio público estático**, que por defecto está disponible en el path `/pillars` y en el directorio `static`. Contiene CSS, JS, NG y toda la documentación del framework en: `docs/reference/`. Para más información puedes consultar el [Módulo Static](#)

					Seguidamente con el método `.configure()` hemos configurado: idiomas, datos del administrador, puerto en el que servirá la aplicación web y smtp. Puedes encontrar todas las opciones configurables de `ENV` en las [Propiedades](#properties).

					> Nota: Al establecer como idioma predeterminado `es` a través de la propiedad `.language`, hemos configurado que los mensajes aparezcan en Español. En este punto de la aplicación si volvemos a consultar el path: `/` veremos el error 404 como 'Error 404: La página no existe, disculpe las molestias', es decir, en Español. Para saber más consulta el [Módulo i18n](#)

					La [clase Route](#) permite crear el par ruta-manejador. Añadimos a `ENV` las rutas, y los manejadores para las mismas, mediante el método `.addRoute(configuración, manejador);`.  
					
					En la configuración para la creación del Route especificamos, entre otras cosas, la ruta o path, y en el segundo parámetro declaramos el manejador que atenderá en el path especificado. En el caso de no especificar path, por defecto será `/`. Seguidamente vamos a añadir un Route a `ENV`, mediante el método `.addRoute()`. 

				:highlight(lang='javascript')
					ENV.addRoute(
						{
							path:'/'
						},

						function(gw){
							gw.send("Hola Mundo");
						}
					);

				:markdown
					Ahora la aplicación responderá en `/` el mensaje *Hola Mundo*. 

					> Nota: Nótese que como hemos definido el entorno en dos idiomas se crean subrutas para el resto de idiomas. En este caso tendremos disponible el árbol de rutas `/en/` y `/es/`, y en `/` estará el idioma definido como predeterminado.
					
					El par configuración-manejador es un objeto route. Seguidamente vamos a crear primero el objeto y posteriormente añadirlo a `ENV`:

				:highlight(lang='javascript')
					route = new Route(
						{
							path:'/email'
						},
						function(gw){
							Mailer.send(
								to: "youremail@domain.com"
								subject: "Hola!",
								html: "Hola! Este correo electrónico fue enviado con el framework Pillars.js"
							);
						});

					ENV.addRoute(route);

				:markdown
					Al haber configurado el servidor smtp, tenemos disponible la [librería Mailer](#), y mediante el método `.send()` enviamos un correo electrónico. Por lo tanto, dada la configuración del `Route`, cuando el usuario visite la URL `/email` automáticamente se enviará un email a la dirección descrita en el parámetro `to:`.

					> Nótese que hemos añadido el `Route`, primero creándolo mediante `route = new Route(...)` y posteriormente agregándolo a `ENV` con el método `.addRoute()`.

				//- Example
			



			section.example
				h3#example-2 Ejemplo 2. Conexión a base de datos.
				:markdown
					El código fuente de este ejemplo está en .... 
				:highlight(lang='javascript')
					require("pillars").start();

					ENV.configure(
						database:{
							hostname:'youremail@domain.com',
							user:'name',
							password:'surname'
						}
					);

				:markdown
					

				:highlight(lang='javascript')
					ENV.addRoute(
						{
							path:'/'
						},

						function(gw){
							gw.send("Hola Mundo");
						}
					);

				:markdown
					Ahora la aplicación responderá en `/` el mensaje *Hola Mundo*. 

					> Nótese que como hemos definido el entorno en dos idiomas se crean subrutas para el resto de idiomas. En este caso tendremos disponible el árbol de rutas `/en/` y `/es/`, y en `/` estará el idioma definido como predeterminado.
					
					El par configuración-manejador es un objeto route. Seguidamente vamos a crear primero el objeto y posteriormente añadirlo a `ENV`:

				:highlight(lang='javascript')
					route = new Route(
						{
							path:'/email'
						},
						function(gw){
							Mailer.send(
								to: "youremail@domain.com"
								subject: "Hola!",
								html: "Hola! Este correo electrónico fue enviado con el framework Pillars.js"
							);
						});

					ENV.addRoute(route);

				:markdown
					Al haber configurado el servidor smtp, tenemos disponible la [librería Mailer](#), y mediante el método `.send()` enviamos un correo electrónico. Por lo tanto, dada la configuración del `Route`, cuando el usuario visite la URL `/email` automáticamente se enviará un email a la dirección descrita en el parámetro `to:`.

					> Nótese que hemos añadido el `Route`, primero creándolo mediante `route = new Route(...)` y posteriormente agregándolo a `ENV` con el método `.addRoute()`.




		

