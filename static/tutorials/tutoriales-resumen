- Tutoriales
1) De PHP a Node.js con Pillars.JS

	
	Hay una serie de características destacables entre los dos lenguajes: 

	- Síntaxis, esta es obvia, Node.js es Javascript. 
	- Servidor HTTP. En PHP dependemos siempre de un servidor HTTP, que en la mayoría de casos es Apache. Mientras que en Node.js es el mismo el que realiza las funciones de servidor HTTP.
	- Estructura/arquitectura de la aplicación web. En el caso de PHP dividimos la arquitectura en carpetas, de forma que si accedemos a http://localhost/web3/ sabemos que habrá una carpeta en el servidor que se llamará web3 y ésta contendrá los archivos PHP. En Node.js podemos tener un solo archivo JS y éste se encargará de responder en las rutas que hayamos programado.
	- Asincronía
	- Monohilo


	Vamos a tratar en mayor profundidad las características más importantes:


2) Primera toma de contacto con la arquitectura de una aplicación con PillarsJS
- ejercicio sencillo con rutas
   - rutas parametrizables


3) Request y Response
	Toda solicitud HTTP al servidor es un request, y toda respuesta del servidor HTTP al cliente en un response. 

	3.1) Petición del cliente: Request.
		- client-server.jade.
		El protocolo HTTP define 8 métodos de petición: HEAD, GET, POST, PUT, DELETE, TRACE, OPTIONS Y CONNECT, todos están soportados por Pillars.js. En este tutorial vamos a ver dos formas de enviar datos del cliente al servidor: 

			+ Query String. *(El conocido GET)*
			+ Contenido de la solicitud. *(El conocido POST)*



	3.2) Respuesta del servidor: Response.
		El envío de datos desde el servidor al cliente se realiza siempre dentro de un objeto route, que es el objeto que maneja la petición.
		
		Los métodos que realizan envío a cliente, y por tanto los que componen los encabezados HTTP, son  métodos del objeto gangway: 

			+ [gw.send()](../reference/gangway.jade#method-send)
			+ [gw.html()](#)
			+ [gw.text()](#)
			+ [gw.json()](#)
			+ [gw.render()](#)
			+ [gw.file()](#)

		Todos estos métodos finalizan el objeto gangway. Una vez se ejecute este método, no se ejecutará ningún código más que hubiese después de esta llamada. 

	3.3) Cookies
	3.4) Protocolo por partes: Streaming.



4) Configuración del Servidor
	- Filosofía de valores por defecto, basándose en los estándares de la web.
	project.configure({

	});
	Tutorial: Configuración de servidor HTTP en PillarsJS.
	Tutorial: Configuración de servidor HTTPS en PillarsJS.


	<h2>Asincronía



	<h2>Monohilo





5) Internacionalización

6) Programación de tareas

7) Sistemas de logs.

8) Motores de renderizado.




