include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'Crier',url:'/pillars/docs/reference/crier.jade'}];
	+reference-layout("Pillars.js Reference - Crier - 'make it easy!'",path)

		#title
			h1 Crier
				em  Librería
			//a.source(href="https://github.com/pillarsjs/pillars/blob/master/lib/Logger.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:marked
				La **librería Crier** añade funcionalidades potenciadas de log. Permite definir: 
				+ **Level**. Nivel del mensaje. Por defecto están definidos los niveles: info, log, alert, error y warn.
				+ **Groups**: Grupo del mensaje define qué grupo o librería emitió el mensaje. Por ejemplo, una librería llamada 'hola', creará un grupo llamado 'hola' mediante `.addGroup('hola')`, y los mensajes que se emitan desde esta librería se visualizarán en este grupo. 
				+ **Stores**: Almacenamiento. Define los almacenamientos disponibles para los mensajes, por defecto es la consola, email y fichero. Podemos definir otros almacenamientos mediante `.addStore()`.
				+ **Rules**: dado un mensaje (log) se define mediante una regla, qué hacer con el mensaje. Por ejemplo, si el mensaje es de Nivel Warn que se envíe por correo electrónico al administrador. 


			.msg.msg-icon.bg-info Estamos completando la referencia. ¡Disculpa las molestias!. Síguenos en las redes sociales para estar al tanto de las actualizaciones de la documentación. 

	
	//
		//- Syntax
		section.syntax
			h2#syntax Constructor
			codesyntax.
				logger.info();

			:marked
				Lorem ipsum

			:highlight(lang='javascript')
				// Creación más básica de un objeto route. 
				// Al omitir el objeto de configuración se establecen los valores por defecto

				route = new Route(function(gw){
					gw.send("Hola Mundo");
				});



		//- Description
		section.description
			h2#description Descripción
			:marked
				Lorem ipsum
			
						
		//- Properties
		section.properties
			h2#properties Propiedades
		

			//- Property
			section.property
				h3#property-pathRegex: code
					small Route.prototype
					| .pathRegex

				//- Property description
				section.description
					:marked
						Propiedad de **sólo lectura** que contiene la expresión regular de la propiedad `path`. Si modificamos `path`, `pathRegex` se actualiza automáticamente.

		//- Methods
		section.methods
			h2#methods Métodos

			//- Method			
			section.method
				h3#method-removeRoute: code
					small Route.prototype
					| .removeRoute()

				//- Method description
				section.description
					:marked
						Dado el identificador de un objeto route hijo, elimina el objeto hijo.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						.removeRoute( route identificator );

					:marked
						+ *route identificator*: **String** identificador del objeto route.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var web = home.removeRoute('web');	
						// Dejaría de estar disponible las funcionalidades en /web



		//- Eventos
		section.events
			h2#events Eventos

			section.event
				h3#event-idUpdate: code
					| idUpdate

				:marked
					 Evento que se emite cuando el id del route es actualizado.

				:highlight(lang='javascript')
					//Creación del route
					route = new Route(function(gw){
						gw.send("Message");
					});

					//Capturar el evento
					route.on('idUpdate', function(){
						console.log("Evento idUpdate capturado");
					});

					route.id = "home";

					/*Imprime: 
						Evento idUpdate capturado
					*/