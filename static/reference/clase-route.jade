include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/reference/'},{label:'Clase Route',url:'/reference/clase-route.jade'}];
	+reference-layout("Pillars.js Reference - Clase Route - 'make it easy!'",path)

		#title
			h1 Clase Route
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/lib/Route.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				La **creación de un objeto route** acepta como parámetros una *configuración* y el *handler*. El *handler* se ejecutará cuando la **petición** *(request)* coincida con la *configuración* del route.			
			
		//- Syntax
		section.constructor
			h2#constructor Constructor
			:codesyntax
				route = new Route( configuration, handler );

			:markdown
				+ **configuration**: Opcional. Conjunto de *parámetros de configuración* del route. Se pueden definir: 
					+ [id](#property-id): **String**, identificador del route.
					+ [path](#property-path): **String**, path al que responderá.
					+ [host](#property-host): **String**, nombre o ip de host que atenderá.
					+ [active](#property-active): **Boolean**, si está activo o no. En el caso de no estar activo, no responderá.
					+ [method](#property-method): **String** o **Array**, método/s de la petición HTTP que acepta el *objeto route*. Acepta uno o varios. Soporta HEAD, GET, POST, PUT, DELETE, TRACE, OPTIONS y CONNECT.
					+ [https](#property-https): **Boolean**. Define si el objeto atenderá o no solicitudes *https*. Por defecto es **undefined**, por lo que el objeto aceptará conexiones *http* y *https*. **true** para que sólo atienda *https*, y **false** para que no atienda *https*.
					+ [multipart](#property-multipart): **Boolean**. Propiedad para indicar que el *controlador* acepte ficheros.
					+ [maxUploadSize](#property-maxUploadSize): **Integer**. Propiedad para modificar el tamaño máximo permitido de solicitud para el route concreto. Esta propiedad originalmente está definida en [`project.config.maxUploadSize`](project.jade#property-config)
					+ [cors](#property-cors): **Boolean**, por defecto es **false**. Es utilizado en el plugin cors, define si otros sitios web van a poder utilizar recursos de este objeto.  
					+ [session](#property-session): **Boolean**, false por defecto. **true** para activar sesiones. Es utilizado por el plugin [sessions.js](funcionamiento-plugins.jade#plugin-sessions) para establecer sesiones de usuario.

				> Ver Configuración de un *objeto route* e interactuación con los *plugins*.

				+ **handler**: Opcional. Manejador que se ejecutará siempre y cuando la petición coincida con la *configuración* del objeto route. El *handler* siempre recibe como parámetro el [objeto gangway](gangway.jade).


			:highlight(lang='javascript')
				// Creación más básica de un objeto route. 
				// Al omitir el objeto de configuración se establecen los valores por defecto

				var myRoute = new Route(function(gw){
					gw.send("Hola Mundo");
				});

				project.routes.add(myRoute);



			:highlight(lang='javascript')
				// Creación de un objeto route con id 'web' y path '/web'. 
				// El manejador envía al cliente el renderizado del archivo 
				// example.jade utilizando la librería templated.

				var myRoute = new Route(
					{
						id: "web",
						path: "/web/"
					},
					function(gw){
						gw.render("example.jade");
					}
				);

				project.routes.add(myRoute);



			:highlight(lang='javascript')
				// Creación de un objeto route con id 'nodo-padre' sin controlador, por lo que 
				// la aplicación no responderá en /. Y creación
				// de otros dos routes hijos dependientes de éste.

				var myRoute = new Route({id: 'nodo-padre'});

				myRoute.routes.add(new Route(
					{path: 'hola' },
					function(gw){
						gw.send("Hola!!");
					}));
				
				myRoute.routes.add(new Route(
					{path: 'adios'}, 
					function(gw){
						gw.send("Adios! :P");
					}));
				
				project.routes.add(myRoute);	
					
				

		//- Description
		section.description
			h2#description Descripción
			:markdown
				Las rutas que atenderá la aplicación se definen mediante *objetos route* añadidos al proyecto en `project.routes`. 

				Los objetos de la clase Route **permiten crear el enrutado de la aplicación** dotando a ésta de un **enrutado dinámico** y por lo tanto, pudiendo **conectar** y **deconectar** rutas de forma dinámica, es decir, con la aplicación en funcionamiento.

				El objeto se puede declarar sin *configuración*, por lo que toma los valores predeterminados. También se puede declarar sin *manejador*, por lo que en este caso el objeto route actuaría como **elemento organizativo**.

				También son **anidables** por lo que **organizan y agrupan funcionalidades** de la aplicación. Tienen la versatilidad de crear estructuras arbóreas donde el nodo raíz será el que se conecte a la aplicación mediante `project.routes.add()`. Las estructuras creadas podrán ser árboles n-arios de altura h. El sistema de enrutado, por lo tanto, no tendrá que buscar coincidencia en todos los *parámetros de configuración* de todas las rutas añadidas de forma lineal y completa, sino que recorrerá sólo los hijos directos del nodo raíz en busca de coincidencias. 
				
				Como hemos visto anteriormente, un objeto route se crea mediante una *configuración* y el *handler*. Los *parámetros de configuración* con los que es instanciado el objeto route es de vital importancia para que se ejecuten, o no, **Plugins** instalados en la aplicación, ya que serán estos parámetros los que disparen los plugins pertinentes. Por lo tanto los plugins se ejecutan, ante una configuración concreta de un *objeto route*. De esta forma tendremos instalados plugins en el sistema que no tendrán porqué ejecutarse necesariamente, dependerá de la configuración del route y de que esta configuración coincida con la petición. 

				El [Plugin router](plugins.jade#plugin-router) es el encargado de realizar el enrutado en base a los *objetos route* añadidos a `project.routes`.



			:markdown
				> Los **parámetros de configuración** del route adquieren bastante importancia cuando combinamos objetos route y plugin, ya que será en este objeto de configuración *configuration* donde activaremos los plugins que requiramos en el objeto route. Ver Configuración de un *objeto route* e interactuación con los *plugins*.


						
		//- Properties
		section.properties
			h2#properties Propiedades

			//- Property
			section.property
				h3#property-id: code
					small Route.prototype
					| .id

				//- Property description
				section.description
					:markdown
						**String** identificador del objeto route. Si no se declara el id en la creación del objeto, se autogenera. 

					:highlight(lang='javascript')
						var route = new Route(function(gw){gw.send("Hola Mundo")});
						console.log(route.id);
						//Imprime: i47a45wc6
						route.id = "myRoute";
						console.log(route.id);
						//Imprime: myRoute


			//- Property
			section.property
				h3#property-path: code
					small Route.prototype
					| .path

				//- Property description
				section.description
					:markdown
						Path al que responderá el route. Por defecto es '/'. **String**. 

						Están soportadas las rutas parametrizadas por lo que están permitidas las formas `path:'/*:var'`, `path:'/:var'`, etc. 


			//- Property
			section.property
				h3#property-method: code
					small Route.prototype
					| .method

				//- Property description
				section.description
					:markdown
						**Método de petición** que acepta el route. Para un sólo método acepta un **String**, para dos métodos se setea como **Array**.

					:highlight(lang='javascript')
						route.method = "GET"; //sólo acepta GET 
						route.method = ["GET","POST"]; //acepta GET y POST

					:markdown
						La propiedad `.method` es **heredable** en una estructura arbórea de objetos route.

						> Ver herencia de propiedades del objeto route en una estructura arbórea.
			

			//- Property
			section.property
				h3#property-host: code
					small Route.prototype
					| .host

				//- Property description
				section.description
					:markdown
						Host al que responderá el route. **String**. Por defecto es `undefined`, por lo que acepta todos los host.

					:highlight(lang='javascript')
						route.host = "www.pillarsjs.com";		

					:markdown
						> Esta propiedad es útil si se requiere que un objeto route sólo responda cuando el cliente esté visitando un host específico como el del ejemplo.

			//- Property
			section.property
				h3#property-https: code
					small Route.prototype
					| .https

				//- Property description
				section.description
					:markdown
						Propiedad para indicar si el *objeto route* acepta conexiones http, https o ambas. Por defecto es ***undefined*.
						+ **undefined** para permitir http y https.
						+ **true** para sólo permitir conexiones **https**.
						+ **false** para sólo permitir conexiones **http**.

			//- Property
			section.property
				h3#property-multipart: code
					small Route.prototype
					| .multipart

				//- Property description
				section.description
					:markdown
						Tipo **Boolean**. **true** para indicar que el controlador acepte ficheros. Hay que tener en cuenta que la propiedad `.method` deberá estar seteada en `POST` para que acepte ficheros.

						**false** para no aceptar ficheros.


			//- Property
			section.property
				h3#property-maxUploadSize: code
					small Route.prototype
					| .maxUploadSize

				//- Property description
				section.description
					:markdown
						Propiedad para modificar el tamaño máximo permitido de solicitud para el route concreto. Esta propiedad originalmente está definida en `project.config.maxUploadSize`. 

						Si esta propiedad está definida en `project.config` prevalecerá la definida en el *objeto route*.

			//- Property
			section.property
				h3#property-cors: code
					small Route.prototype
					| .cors

				//- Property description
				section.description
					:markdown
						**Boolean**, por defecto es **false**. Es utilizado en el plugin cors, define si otros sitios web van a poder utilizar recursos de este objeto. 
						+ *false* indica que no acepta solicitudes cors de ningún origen. 
						+ *true* indica que acepta solicitudes cors de cualquier origen.
						+ Si se especifica un *Array de strings*, podemos definir de qué dominios concretos acepta nuestro servidor solicitudes cors.

			//- Property
			section.property
				h3#property-session: code
					small Route.prototype
					| .session

				//- Property description
				section.description
					:markdown
						Es utilizado por el plugin [sessions.js](funcionamiento-plugins.jade#plugin-sessions) para establecer sesiones de usuario. Las sesiones se establecen con persistencia en memoria, por lo que si se apaga el servidor se pierden. (*Más adelante se ampliará a sistema de sesiones con persistencia en base de datos*)

						**Boolean**, false por defecto. **true** para activar sesiones. 



			//- Property
			section.property
				h3#property-routes: code
					small Route.prototype
					| .routes

				//- Property description
				section.description
					:markdown
						Cada *objeto route* a su vez, posee la propiedad `routes` de tipo [ObjectArray](https://github.com/bifuer/ObjectArray), que podrá contener los nodos route hijos. El funcionamiento es exactamente igual que [`project.routes`](project.jade#property-routes).


			//- Property
			section.property
				h3#property-handlers: code
					small Route.prototype
					| .handlers

				//- Property description
				section.description
					:markdown
						Listado de manejadores de un route. Los usual es que un objeto route tenga un sólo manejador, aunque es posible crearlo con varios manejadores.

					:highlight(lang='javascript')
						//Creación del middleware
						var msg = function(gw,next){ 
							gw.data.myData="Hola Mundo!!!"; 
							next(); 
						};

						//Creación del route con un middleware
						var myRoute = new Route(
							{id:"home"},
							msg,
							function(gw){
								gw.send(gw.data.myData);
							}
						);

						project.routes.add(myRoute);

						//Imprime: Hola Mundo!!!

					:markdown
						Si bien es cierto, que deberemos sopesar la opción de incluir manejadores intermedios de esta forma, o incluir directamente un Plugin.

						La propiedad `.handlers` devuelve un Array con todos los manejadores del route. Podemos realizar modificaciones de la propiedad: 


					:highlight(lang='javascript')
						console.log(myRoute.handlers);

						/*Imprime: 
							[ [Function], [Function] ]
						*/

						myRoute.handlers.shift(); // Eliminamos el primer elemento del Array
						console.log(myRoute.handlers);

						/*Imprime: 
							[ [Function] ]
						*/


			//- Property
			section.property
				h3#property-active: code
					small Route.prototype
					| .active

				//- Property description
				section.description
					:markdown
						**Boolean** que define si el route está activo o no. Por defecto es **true**, activo.

					:highlight(lang='javascript')
						var myRoute = new Route({}, function(gw){gw.send("Hola Mundo!");});
						myRoute.active = false;
						//En este momento la aplicación no respondería


			//- Property
			section.property
				h3#property-params: code
					small Route.prototype
					| .params

				//- Property description
				section.description
					:markdown
						Devuelve un Array de **sólo lectura** que acumula los parámetros que se han pasado en la creación de la ruta.
						GET, POST Y PATH. 

					:highlight(lang='javascript')
						var users = new Route({path:"/user/:param1/:param2"},function(gw){
							gw.send(users.params);
						});

						project.routes.add(users);

						/* Visitando http://127.0.0.1:3000/user/javi/fotos - Imprime: 
							[
								"param1",
								"param2"
							]
						*/


					:markdown
						> El contenido de los parámetros pasados por la URL, así como del POST y del GET, pueden ser consultados con el objeto gangway. [`gw.params`](/reference/gangway.jade#property-params).
						


			//- Property
			section.property
				h3#property-pathRegex: code
					small Route.prototype
					| .pathRegex

				//- Property description
				section.description
					:markdown
						Propiedad de **sólo lectura** que contiene la expresión regular de la propiedad `path`. Si modificamos `path`, `pathRegex` se actualiza automáticamente.