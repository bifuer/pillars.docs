include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/reference/'},{label:'Introducción',url:'/reference/introduccion.jade'}];
	+reference-layout("Pillars.js Reference - Introducción - 'make it easy!'",path)

		#title
			h1 Introducción
				em  Pillars.js Reference
			

		//- Summary
		section.summary
			:marked
				Pillars.js proporciona un entorno de trabajo con herramientas para el desarrollo de aplicaciones web en Node.js. Su **objetivo** es ofrecer un entorno de trabajo homogéneo y asequible.

			:highlight(lang='javascript')
					var project = require('pillars');

					project.services.get('http').start();

					project.routes.add(new Route(function(gw){
					  gw.html("Hello World!!");
					});


			:marked
				
				En Pillars.js hay cinco conceptos básicos:
				+ **El entorno** o **proyecto**, es el **punto central de anclaje**, donde se añaden **controladores de ruta** (*objetos Route*), **plugins** y **servicios**. Obtenemos el proyecto para comenzar a trabajar incluyendo la librería: `var project = require('pillars');`.
				+ **Servicios**, conjunto de servicios disponibles y ampliables en el entorno tales como http, https, MongoDB o MySQL por ejemplo. Un proyecto Pillars.js permite varios servicios del mismo tipo corriendo al mismo tiempo, por ejemplo varios servicios http. Inicialmente cuenta con un *servicio http* built-in: `project.services.get('http')`.
				+ **Enrutado y Clase Route**. El responsable del enrutado es el [Plugin router.js](funcionamiento-plugins.jade#plugin-router), un plugin built-in y perteneciente a la Cadena de Plugins nativa. Mediante la [Clase Route](clase-route.jade) se crean manejadores/controladores junto con su configuración, que serán añadidos al proyecto en la propiedad `project.routes`. Los *objetos route* ofrecen la versatilidad de anidamiento, y son conectables y desconectables "en caliente". [Ver enrutado](enrutado.jade).
				+ **Gangway**. En cada solicitud se genera un *objeto Gangway* que es pasado por parámetro al controlador/Route. Este objeto contiene toda la información necesaria sobre la solicitud (request) parseada y lista para su uso, junto con multitud de métodos para la respuesta (response). Por ejemplo podremos ver propiedades como [`gw.ip`](gangway.jade#property-ip) o [`gw.accepts.languages`](gangway.jade#property-accepts) y métodos como [`gw.file()`](gangway.jade#method-file) que permite enviar archivos al cliente compatible con el protocolo [byte-serving](http://en.wikipedia.org/wiki/Byte_serving), entre muchos otros.
				+ **Plugins**. La base sobre la que se cimenta Pillars.js son los *plugins*, que a su vez conforman la **Cadena de Plugins**. Los Plugins permiten ampliar la funcionalidad del framework. Recomendamendamos leer el [funcionamiento de los plugins en Pillars.js.](funcionamiento-plugins.jade)