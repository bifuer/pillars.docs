include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'Introducción',url:'/pillars/docs/reference/introduccion.jade'}];
	+reference-layout("Pillars.js Reference - Introducción - 'make it easy!'",path)

		#title
			h1 Introducción
				em  Pillars.js Reference
			

		//- Summary
		section.summary			
			:markdown
				Pillars.js proporciona un entorno de trabajo con herramientas para el desarrollo de aplicaciones web en Node.js. 

			:highlight(lang='javascript')
					var project = require('pillars');

					project.services.get('http').start();

					project.routes.add(new Route(function(gw){
					  gw.html("Hello World!!");
					});


			:markdown
				
				En Pillars.js hay cinco conceptos básicos:
				+ **El entorno** o **proyecto**, es la variable que devuelve la librería `var project = require('pillars');`. Nos ofrece un entorno inicial y herramientas para la construcción de la aplicación web. Es el punto central de anclaje, donde se añaden controladores de ruta (Route) y Plugins. 
				+ **Servicios**, conjunto de servicios disponibles y ampliables en el entorno, tales como http, https, MongoDB o MySQL, por ejemplo. Un proyecto Pillars.js permite varios servicios del mismo tipo, por ejemplo varios servicios http.
				+ **Routes**. Controlador de ruta, clase con la que se crea un manejador/controlador y su configuración. Por lo tanto, mediante objetos route se definen rutas que atenderá la aplicación, recibe el objeto Gangway por parámetro. Ofrecen la versatilidad de anidamiento y son conectables y desconectables "en caliente".
				+ **Gangway**. En cada solicitud se genera un objeto Gangway que es pasado al controlador/Route, este objeto contiene toda la información necesaria sobre la solicitud (request) parseada y lista para su uso, junto con multitud de métodos para la respuesta (response). Por ejemplo podremos ver propiedades como `.ip` o `.accepts.languages` y métodos como `.file()` que permite enviar archivos al cliente compatible con el protocolo por partes de http, entre muchos otros.
				+ **Plugins**. La **Clase Plugin** permite ampliar las funcionalidades del framework, creando controladores para el entorno en general. Pueden modificar el funcionamiento de gangway y Route, así como acceder a sus propiedades.
