include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'project',url:'/pillars/docs/reference/project.jade'}];
	+reference-layout("Pillars.js Reference - project - 'make it easy!'",path)

		#title
			h1 Entorno
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/index.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				La librería devuelve un proyecto con una configuración mínima inicial y sobre el que se construye el resto de la aplicación. A esta configuración inicial la llamamos entorno o proyecto.

				`var project = require('pillars');`

				El proyecto es el **punto central y de anclaje** para el resto de los elementos que componen la aplicación web. 
	

		//- Description
		section.description
			h2#description Descripción
			:markdown
				La librería consiste en la creación de un entorno que ofrece una serie de **propiedades** y **funciones** que nos permiten trabajar con el framework para la creación de una aplicación web. 

				Las propiedades más destacables son: 
				+ `project.services`, servicios instalados en el proyecto. Por defecto el framework trae instalado un servicio http en el puerto 80. 
				+ `project.routes` o cadena de routes. Contiene todos los controladores/manejadores disponibles en el proyecto.
				+ `project.plugins` o cadena de plugins. Es un objeto de tipo ObjectArray que contiene todos los Plugins instaldos en el proyecto. Por defecto Pillars.js tiene instalados una serie de plugins. [Ver Plugins nativos en Pillars.js](plugins.jade).

				>Realmente hay que visualizar el framework como una cadena de Plugins ordenados, al primer plugin le llega la petición de usuario, y pasa al siguiente plugin; tanto la petición de usuario como información adicional. Obviamente, dependiendo del contenido de la petición de usuario, se ejecutarán unos plugins u otros, pero siempre de forma ordenada. El plugin más importante es el **plugin routes**, encargado de gestionar la **cadena de routes**.
				


		//- Properties
		section.properties
			h2#properties Propiedades

			//- Property
			section.property
				h3#property-debug: code
					small project
					| .debug

				//- Property description
				section.description
					:markdown
						 La propiedad `.debug` establece el entorno en modo debug lo que hará que se muestre información adicional de los errores. 

						 Es de tipo **Boolean**.
						 Por defecto es: **true**.


			//- Property
			section.property
				h3#property-server: code 
					small project
					| .config

				//- Property description
				section.description
					:markdown
						La propiedad `.config` contiene las variables de entorno del proyecto:
						+ `cors`: **Boolean** por defecto es **false**. 						
						+ `maxUploadSize`: **Integer**, especifica el tamaño máximo de archivo permitido en la solicitud. Por defecto 5\*1024\*1024 (5MB).
						+ `maxCacheFileSize`: **Integer** por defecto es 5*1024*1024 (5MB).
						+ `cacheMaxSamples`: **Integer** por defecto es 100.
						+ `cacheMaxSize`: **Integer** por defecto es 250*1024*1024.
						+ `cacheMaxItems`: **Integer** por defecto es 5000.
						+ `fileMaxAge`: **Integer** por defecto es 7*24*60*60. 
						+ `renderReload`: **Boolean** por defecto es **false**.


					:markdown
						> También podemos setear las **variables de entorno** a través del método `project.configure()`.

						Configuración a través de seteo de propiedades: 

					:highlight(lang='javascript')
						project.cors = true;
						project.cacheMaxSize = 25*1024*1024;

					:markdown
						Configuración a través del método `project.configure()`:

					:highlight(lang='javascript')
						project.configure({
							cors: true,
							cacheMaxSize: 25*1024*1024
						});
		

			//- Property
			section.property
				h3#property-services: code 
					small project
					| .services

				//- Property description
				section.description
					:markdown
						Propiedad que contiene los servicios disponibles en la aplicación. Es una instancia de la [Clase ObjectArray](https://github.com/bifuer/ObjectArray), por lo que disponemos de métodos para añadir, eliminar, buscar, etc. los servicios: 

						+ `.add(service)`: 
						+ `.get(id)`: 
						+ `.remove(id)`: 
						+ `.move(id, pos)`: 
						+ `.moveBefore()`:  
						+ `.moveAfter()`: 

					:highlight(lang='javascript')
						

					:markdown				


			//- Property
			section.property
				h3#property-routes: code 
					small project
					| .routes

				//- Property description
				section.description
					:markdown
						Es la cadena de routes. Es una instancia de la [Clase ObjectArray](https://github.com/bifuer/ObjectArray), por lo que es un Array de Objetos, donde **cada objeto es un objeto tipo Route**.


						Por lo tanto, en la propiedad`.routes` se encuentran los objetos route que están disponibles en la aplicación, y además ofrece una serie de métodos, de la clase ObjectArray, para trabajar con los objetos del array, o lo que es lo mismo, para trabajar con la cadena de routes:

						+ `.add(route)`: añade un *objeto route* previamente creado.
						+ `.get(id)`: obtiene un objeto route dado un identificador *id*. 
						+ `.remove(id)`: elimina el objeto route con identificador *id*.
						+ `.move(id, pos)`: mueve el objeto route con identificador *id* a la posición *pos*.
						+ `.moveBefore()`:  
						+ `.moveAfter()`: 

					:highlight(lang='javascript')
						var myRoute = new Route();
						project.routes.add();

					:markdown				
			//- Property
			section.property
				h3#property-plugins: code 
					small project
					| .plugins

				//- Property description
				section.description
					:markdown
						Es la cadena de plugins. Propiedad de tipo [ObjectArray](https://github.com/bifuer/ObjectArray). Contiene todos los plugins instalados en la aplicación, para trabajar con los objetos del array disponemos de los siguientes métodos: 

						+ `.add(plugin)`: añade un *objeto plugin* previamente creado.
						+ `.get(id)`: obtiene un objeto plugin dado un identificador *id*. 
						+ `.remove(id)`: elimina el objeto plugin con identificador *id*.
						+ `.move(id, pos)`: mueve el objeto plugin con identificador *id* a la posición *pos*.
						+ `.moveBefore()`:  
						+ `.moveAfter()`: 
						
			
					:highlight(lang='javascript')
						var myPlugin = new Plugin();
						project.plugins.add();


					:markdown
			//- Property
			section.property
				h3#property-version: code 
					small project
					| .version

				//- Property description
				section.description
					:markdown
						`.version` es de solo lectura. Devuelve la versión del framework instalada.

			//- Property
			section.property
				h3#property-path: code 
					small project
					| .path

				//- Property description
				section.description
					:markdown
						La propiedad `.path` es de solo lectura y devuelve el path absoluto de la librería pillars.


			//- Property
			section.property
				h3#property-status: code 
					small project
					| .logFile

				//- Property description
				section.description
					:markdown
						La propiedad `.logFile` ???

			//- Property
			section.property
				h3#property-status: code 
					small project
					| .logCleaner

				//- Property description
				section.description
					:markdown
						La propiedad `.logCleaner` ???



		//- Methods
		section.methods
			h2#methods Métodos

			//- Method
			section.method
				h3#method-configure: code
					small ENV
					| .configure()

				//- Method description
				section.description
					:markdown
						El método `.configure()` permite setear en un solo objeto toda la configuración del entorno.

				
			//- Method
			section.method
				h3#method-resolve: code
					small ENV
					| .resolve()

				//- Method description
				section.description
					:markdown
						Devuelve una ruta absoluta sobre un directorio relativo respecto al directorio de ejecución de la librería `pillars`. 

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						ENV.resolve( directory );

					:markdown
						+ *directory*: **String** del directorio relativo.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var pathStatic = ENV.resolve('./static');
