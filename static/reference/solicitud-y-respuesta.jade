include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Performance',url:'/pillars/docs/reference/'},{label:'Objeto gangway',url:'/pillars/docs/reference/gangway.jade'}];
	+reference-layout("Pillars.js Performance - Objeto gangway - 'make it easy!'",path)

		#title
			h1 Solicitud y Respuesta
				em  Pillars.js Performance
			a.source(href="https://github.com/bifuer/pillars/blob/master/lib/gangway.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				Pillars.js **genera de forma automática** un [objeto gangway](gangway.jade) en cada petición. Contiene como propiedades los **datos del request parseados** y métodos para la respuesta. 

				Este objeto está disponible en el *handler* tanto del **objeto route**, como en el **objeto plugin**.

		//- Description
		section.description
			h2#description Cabeceras HTTP
			:markdown
				a

		//- Description
		section.description
			h2#description Contenido de la petición
			:markdown
				a	

		//- Description
		section.description
			h2#description Cookies
			:markdown
				a

		//- Description
		section.description
			h2#description Streaming
			:markdown
				a

		//- Description
		section.description
			h2#description Trabando con el cliente
			:markdown
				Gangway parsea los datos del request y los setea en sus propiedades de una forma usable y accesible directamente. 

				Algunos parses, como el parser del contenido de la petición HTTP, es posible desactivarlos para que no ocupen tiempo de proceso, si fuera necesario. 

				Los Parses que realiza el objeto gangway son: 
				+ **Datos del POST y del GET** accesibles de forma inmediata a través de la propiedad [gw.content.params](#) y [gw.query](#) .
				+ **Parser del contenido de la Petición HTTP**. Setea la propiedad [`gw.content`](#property-content), por lo que podremos acceder directamente al POST en la propiedad `gw.content.params` en formato JSON, entre otras.

				+ **Parser de las cabeceras HTTP accepts**. Teniendo toda esta información en [`gw.accepts`]() y pudiendo acceder directamente a los idiomas que espera el navegador en `gw.accepts.language`, por ejemplo. En este caso, también se resuelve el idioma que va a utilizar el servidor para el response y lo setea en `gw.language`. 
				
				+ **Parser de Ranges**. Gracias a este parser Pillars.js es compatible con HTTP-ranges, que permite entre otras cosas enviar archivos de gran tamaño con pausa y stop en el navegador, o emitir un video en streaming.

				+ **Parser auth**. Ofrece en la propiedad `gw.auth` un objeto JSON con el user y pass enviados como respuesta a una petición de autenticación HTTP básica. Esta petición HTTP de autenticación básica se realiza con el método [`gw.authenticate()`](#method-authenticate).

				+ **Parser User Agent**. Acceso directo en un único string al motor de renderizado, navegador que usa, si es móvil o no, y OS del cliente.

				+ **Parser del encabezado cookie del request**. Deja las cookies setedas en un objeto JSON en la propiedad `gw.cookie`.

			//- Description
		section.description
			h2#description Idiomas
			:markdown
				a	