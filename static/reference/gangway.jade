include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'Objeto gangway',url:'/pillars/docs/reference/gangway.jade'}];
	+reference-layout("Pillars.js Reference - Objeto gangway - 'make it easy!'",path)

		#title
			h1 Objeto Gangway
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/lib/gangway.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				Pillars.js **genera de forma automática** un objeto gangway en cada petición. Contiene como propiedades los **datos del request parseados** y métodos para la respuesta. 

				Este objeto está disponible en el *handler* tanto del **objeto route**, como en el **objeto plugin**.				
		
		//- Syntax
		section.syntax
			h2#syntax Sintaxis
			:highlight(lang='javascript')
				var myRoute = new Route(function(gw){

					var POST = gw.content.params; 

					var GET = gw.query;
					/*
					{
						id: '37',
						value: 'lipsum'
					}
					*/

					var cookie = gw.cookie;

					var userAgent = gw.ua;
					/*
					ua:{ 
						mobile: false,
						os: 'Windows NT 6.1; WOW64',
						engine: 'Blink',
						browser: 'Chrome'
					}
					*/


					var id = gw.id; 			// id del objeto gangway para la petición.
					var ip = gw.ip;			// ip del cliente
					var browserLang = gw.language;	// Primer idioma del navegador del cliente 
					var cors = gw.cors; 			// Gestion de orígenes cruzados. 
					var method = gw.method;		// Método de la petición  GET y/o POST					
					var encoding = gw.encoding; 		// encoding que se utiliza para el envío al cliente.

					gw.send("<pre>"+util.inspect(gw)+"</pre>");
				});

				

		//- Description
		section.description
			h2#description Descripción
			:markdown
				Gangway parsea los datos del request y los setea en sus propiedades de una forma usable y accesible directamente. 

				Algunos parses, como el parser del contenido de la petición HTTP, es posible desactivarlos para que no ocupen tiempo de proceso, si fuera necesario. 

				Los Parses que realiza el objeto gangway son: 
				+ **Parser del contenido de la Petición HTTP**. Setea la propiedad [`gw.content`](#property-content), por lo que podremos acceder directamente al POST en la propiedad `gw.content.params` en formato JSON, entre otras.

				+ **Parser de las cabeceras HTTP accepts**. Teniendo toda esta información en [`gw.accepts`]() y pudiendo acceder directamente a los idiomas que espera el navegador en `gw.accepts.language`, por ejemplo. En este caso, también se resuelve el idioma que va a utilizar el servidor para el response y lo setea en `gw.language`. 
				
				+ **Parser de Ranges**. Gracias a este parser Pillars.js es compatible con HTTP-ranges, que permite entre otras cosas enviar archivos de gran tamaño con pausa y stop en el navegador, o emitir un video en streaming.

				+ **Parser auth**. Ofrece en la propiedad `gw.auth` un objeto JSON con el user y pass enviados como respuesta a una petición de autenticación HTTP básica. Esta petición HTTP de autenticación básica se realiza con el método [`gw.authenticate()`](#method-authenticate).

				+ **Parser User Agent**. Acceso directo en un único string al motor de renderizado, navegador que usa, si es móvil o no, y OS del cliente.

				+ **Parser del encabezado cookie del request**. Deja las cookies setedas en un objeto JSON en la propiedad `gw.cookie`.


				
			

		//- Properties
		section.properties
			h2#properties Propiedades

			//- Property
			section.property
				h3#property-timer: code
					small gw
					| .timer

				//- Property description
				section.description
					:markdown
						**TimeStamp** de cuando se creó el gangway.

			//- Property
			section.property
				h3#property-id: code
					small gw
					| .id

				//- Property description
				section.description
					:markdown
						Id del objeto gangway, se genera automáticamente.

			//- Property
			section.property
				h3#property-closed: code
					small gw
					| .closed

				//- Property description
				section.description
					:markdown
						**Boolean**, indica si el objeto gangway está en proceso de cerrarse o cerrado.


			//- Property
			section.property
				h3#property-req: code
					small gw
					| .req

				//- Property description
				section.description
					:markdown
						Alias del [objeto request original de Node](http://nodejs.org/api/http.html#http_http_incomingmessage).

			//- Property
			section.property
				h3#property-res: code
					small gw
					| .res

				//- Property description
				section.description
					:markdown
						Alias del [objeto response original de Node](#)

			//- Property
			section.property
				h3#property-socket: code
					small gw
					| .socket

				//- Property description
				section.description
					:markdown
						Es el socket de la solicitud. Es un alias de [request.socket de Node](http://nodejs.org/api/http.html#http_message_socket).

			//- Property
			section.property
				h3#property-statusCode: code
					small gw
					| .statusCode

				//- Property description
				section.description
					:markdown
						Código de estado de la solicitud. Alias de [statusCode original de Node.](http://nodejs.org/api/http.html#http_response_statuscode)

			//- Property
			section.property
				h3#property-headersSent: code
					small gw
					| .headersSent

				//- Property description
				section.description
					:markdown
						Informa si se han enviado las cabeceras de la respuesta o no. Alias de [headersSent original de Node.](http://nodejs.org/api/http.html#http_response_headerssent)

			//- Property
			section.property
				h3#property-accepts: code
					small gw
					| .accepts

				//- Property description
				section.description
					:markdown
						Encabezados accepts de la solicitud HTTP. `.accepts` devuelve un objeto con: 
						+ gw.accepts.types: **Array** que contiene los Content-types que espera como respuesta el navegador en la solicitud.
						+ gw.accepts.language: **Array** que contiene los idiomas que espera el navegador. El idioma que utilizará el servidor en el envío se setea en [`gw.language`](#property-language).
						+ gw.accepts.encodings: **Array** que contiene los encodigns que soporta el navegador. El encoding que utilizará el servidor se setea en [`gw.encoding`](#property-encoding).

			//- Property
			section.property
				h3#property-content: code
					small gw
					| .content

				//- Property description
				section.description
					:markdown
						Cabeceras HTTP que tienen que ver con el cuerpo de la petición. 
						+ type: Content-type de la petición del usuario.
						+ length: tamaño en bytes del cuerpo de la solicitud del cliente.
						+ boundary: aparece solo en las solicitudes POST del tipo multipart-formdata. Código único.
						+ params: gw lo deja vacío. El Plugin Content reader es el que se encarga de completarlo con las variables que recibe del POST del usuario, ficheros incluidos.

			//- Property
			section.property
				h3#property-ranges: code
					small gw
					| .ranges

				//- Property description
				section.description
					:markdown
						Relacionado con la solicitud de rangos en las solicitudes. Negociación del protocolo de partes, bytes-ranges-request. 

						+ check: parámetro de control para saber si se nos ha hecho una petición por rangos.
						+ unit: unidad en la que se solicitan los rangos. Normalmente bytes.
						+ start: byte de comienzo.
						+ end: byte de finalización.

						> El objeto gangway maneja ranges de forma automática cuando se van a enviar ficheros con gw.file().

			//- Property
			section.property
				h3#property-cookie: code
					small gw
					| .cookie

				//- Property description
				section.description
					:markdown
						Objeto con las cookies de la petición parseadas.

			//- Property
			section.property
				h3#property-auth: code
					small gw
					| .auth

				//- Property description
				section.description
					:markdown
						Control de la autenticación HTTP del usuario.
						Devuelve false, en caso de no estar seteado y un objeto con `user` y `pass` en el caso de estarlo. 

					:highlight(lang='javascript')
						auth:{
							user: 'UserName',
							pass: 'PassUser'
						}

					:markdown
						> Echa un vistazo al método [.authenticate](#method-authenticate) para ver el uso conjunto.

			//- Property
			section.property
				h3#property-ua: code
					small gw
					| .ua

				//- Property description
				section.description
					:markdown
						User Agent. Contiene información relativa al cliente: 
						+ mobile: **Boolean**. Si es dispositivo móvil o no.
						+ os: **String** con el Sistema Operativo del cliente.
						+ engine: **String** . Motor de renderizado. Gecko, Webkit, Trident, Blink o Unknow.
						+ browser: **String** . Navegador del cliente. Firefox, Seamonkey, Chrome, Chromium, Safari, Opera, MSIE o Unknow.

					:highlight(lang='javascript')
						/*
						ua:{ 
							mobile: false,
							os: 'Windows NT 6.1; WOW64',
							engine: 'Blink',
							browser: 'Chrome'
						},*/

						gw.ua.mobile;
						gw.ua.os;
						gw.ua.engine;
						gw.ua.browser;

			//- Property
			section.property
				h3#property-origin: code
					small gw
					| .origin

				//- Property description
				section.description
					:markdown
						En una solicitud CORS desde que dominio se está solicitando dicha URL.

			//- Property
			section.property
				h3#property-ip: code
					small gw
					| .ip

				//- Property description
				section.description
					:markdown
						Devuelve la dirección IP del cliente en un **String**.

					:highlight(lang='javascript')
							console.log(gw.ip);
							//>127.0.0.1

			//- Property
			section.property
				h3#property-httpVersion: code
					small gw
					| .httpVersion

				//- Property description
				section.description
					:markdown
						Versión del protocolo HTTP.

			//- Property
			section.property
				h3#property-https: code
					small gw
					| .https

				//- Property description
				section.description
					:markdown
						Aún no implementada. Si la solicitud va por https o no.

			//- Property
			section.property
				h3#property-host: code
					small gw
					| .host

				//- Property description
				section.description
					:markdown
						Host al que se realiza la petición.

					:highlight(lang='javascript')
							console.log(gw.host);
							//>localhost

			//- Property
			section.property
				h3#property-port: code
					small gw
					| .port

				//- Property description
				section.description
					:markdown
						Puerto al que se realiza la petición.

					:highlight(lang='javascript')
							console.log(gw.port);
							//>3000

			//- Property
			section.property
				h3#property-method: code
					small gw
					| .method

				//- Property description
				section.description
					:markdown
						Método utilizado para la petición. Usualmente POST y/o GET. 										

					:highlight(lang='javascript')
							console.log(gw.method);
							//>GET

					:markdown
						> Hay que tener en cuenta que en el momento que se configura el objeto route, si indicamos que el método es POST, el route sólo funcionará si se envía algo mediante POST.


			//- Property
			section.property
				h3#property-path: code
					small gw
					| .path

				//- Property description
				section.description
					:markdown
						Path completo al que se realiza la petición. Puede sufrir modificaciones, por ejemplo por el sistema de traducciones. El que no sufrirá modificaciones será originalPath.

					:highlight(lang='javascript')
						console.log(gw.path);
						//>/es/


			//- Property
			section.property
				h3#property-originalPath: code
					small gw
					| .originalPath

				//- Property description
				section.description
					:markdown
						Path original desde el que se realiza la petición

					:highlight(lang='javascript')
							console.log(gw.originalPath);
							//>/


			//- Property
			section.property
				h3#property-query: code
					small gw
					| .query

				//- Property description
				section.description
					:markdown
						Lo que ha llegado por query al servidor.

					:highlight(lang='javascript')
							// Se visita http://localhost/?q=1
							//> query: { q: '1' }
							gw.send("Has enviado mediante Query String el valor: " + gw.query['q']);


			//- Property
			section.property
				h3#property-referer: code
					small gw
					| .referer

				//- Property description
				section.description
					:markdown
						Encabezado HTTP que indica la URL de la procedencia del usuario que visita la web.

			//- Property
			section.property
				h3#property-connection: code
					small gw
					| .connection

				//- Property description
				section.description
					:markdown
						Encabezado HTTP. Encabezado connection. Si debes mantener la conexión abierta.

					:highlight(lang='javascript')
						console.log(gw.connection);
						//>keep-alive


			//- Property
			section.property
				h3#property-cache: code
					small gw
					| .cache

				//- Property description
				section.description
					:markdown
						Engloba la información sobre como trabajar con el cache en esta solicitud. 
						+ control: 
						+ nonemath: si no hay coincidencias. 
						+ modsince: si ha sido moficado desde. 

						> Con estas propiedades trabaja cackeck() (Check caché)

					:highlight(lang='javascript')
						console.log(gw.cache);
						//>{ control: 'max-age=0',
						//	 nonematch: false, // va con el etag
						//   modsince: 'Tue, 30 Dec 2014 18:47:00 GMT' },

			//- Property
			section.property
				h3#property-files: code
					small gw
					| .files

				//- Property description
				section.description
					:markdown
						Descriptor de los archivos para la subida tipo multipart.


			//- Property
			section.property
				h3#property-pathParams: code
					small gw
					| .pathParams

				//- Property description
				section.description
					:markdown
						Contiene un objeto con los parámetros y valores que han llegado al servidor a través de larRuta parametrizada. 
						En Pillars.js puedes configurar los path de los objetos route con parámetros libres. /:var,/*:var, /:var1/:var


					:highlight(lang='javascript')
						/**/
						var route = new Route({path:'/:var1/:var2'},function(gw){
							console.log(gw.params);
							gw.send("end");
						});
						//Consultando localhost:300/users/john imprime en consola:
						//>{var1: 'users', var2:'john'}

			//- Property
			section.property
				h3#property-params: code
					small gw
					| .params

				//- Property description
				section.description
					:markdown
						Contiene un objeto con todo lo que le ha llegado a la petición por POST, GET y rutas parametrizadas. 
						Es decir, gw.pathParams (/:var, /*:var) + gw.query (?q=1) + gw.content.params(POST). 

					:markdown
						> Consulta cómo funcionan los path que admiten parámetros [aquí](#).

			//- Property
			section.property
				h3#property-data: code
					small gw
					| .data

				//- Property description
				section.description
					:markdown
						El mejor lugar donde guardar datos temporales.
					
					:highlight(lang='javascript')
						var route = new Route(function(gw){
							gw.data.userNick = "lilxelo";
							gw.send("Hola: "+gw.data.miNick);
						});
						// Imprime: Hola: lilxelo

			
			//- Property
			section.property
				h3#property-encoding: code
					small gw
					| .encoding

				//- Property description
				section.description
					:markdown
						Encoding que va a usar el servidor para la respuesta. Está basado en [gw.accepts.encodings](#property-accepts). 


			//- Property
			section.property
				h3#property-language: code
					small gw
					| .language

				//- Property description
				section.description
					:markdown
						Idioma que va a usar el servidor para la respuesta.  Está basado en [gw.accepts.languages](#property-accepts). 


			//- Property
			section.property
				h3#property-responseCookies: code
					small gw
					| .responseCookies

				//- Property description
				section.description
					:markdown
						Paquete de cookies parseadas para enviar en la respuesta.


			//- Property
			section.property
				h3#property-cors: code
					small gw
					| .cors

				//- Property description
				section.description
					:markdown
						Cabeceras CORS. 

					:highlight(lang='javascript')
						//cors: 
						//	{ origin: false,
						//	credentials: false,
						//	methods: false,
						//	headers: false }

			//- Property
			section.property
				h3#property-size: code
					small gw
					| .size

				//- Property description
				section.description
					:markdown
						Es el tamaño de la respuesta al cliente. Es usado para generar el encabezado HTTP "Content-Length" cuando ejecutamos cualquier método de envío a cliente.


			//- Property
			section.property
				h3#property-lastmod: code
					small gw
					| .lastmod

				//- Property description
				section.description
					:markdown
						La propiedad .lastmod (objeto Date) indica la fecha de última modificación de la respuesta, este valor es usado para generar el encabezado HTTP "Last-modified".
						Por defecto será la fecha y hora en la que se efectúa dicha respuesta y la forma más apropiada de asignarlo es por medio del uso de .cacheck() para, en un solo paso, establecer dicho valor y realizar la comprobación de caché.



			//- Property
			section.property
				h3#property-etag: code
					small gw
					| .etag

				//- Property description
				section.description
					:markdown
						Propiedad etag. Cuando el servidor va a enviar la respuesta cifra mediante ENV.encrypt() el etag del recurso y lo envía al cliente. 

						Cuando recibe una solicitud, desencripta el etag mediante ENV.decrypt();


	

		//- Methods
		section.methods
			h2#methods Métodos

			//- Method
			section.method
				h3#method-setTimeout: code
					small gw
					| .setTimeout()

				//- Method description
				section.description
					:markdown
						Alias de [response.setTimeout(msecs, callback)](http://nodejs.org/api/all.html#all_response_settimeout_msecs_callback) de Node.

			//- Method
			section.method
				h3#method-writeContinue: code
					small gw
					| .writeContinue()

				//- Method description
				section.description
					:markdown
						Alias de [response.writeContinue(statusCode, [reasonPhrase], [headers])](http://nodejs.org/api/all.html#all_response_writecontinue) de Node.

				
			//- Method
			section.method
				h3#method-writeHead: code
					small gw
					| .writeHead()

				//- Method description
				section.description
					:markdown
						Alias de [response.writeHead(statusCode, [reasonPhrase], [headers])](http://nodejs.org/api/all.html#all_response_writehead_statuscode_reasonphrase_headers) de Node.

			
			//- Method
			section.method
				h3#method-setHeader: code
					small gw
					| .setHeader()

				//- Method description
				section.description
					:markdown
						Alias de [response.setHeader(name, value)](http://nodejs.org/api/all.html#all_response_setheader_name_value) de Node.

			//- Method
			section.method
				h3#method-getHeader: code
					small gw
					| .getHeader()

				//- Method description
				section.description
					:markdown
						Alias de [response.getHeader(name)](http://nodejs.org/api/all.html#all_response_getheader_name) de Node.


			//- Method
			section.method
				h3#method-removeHeader: code
					small gw
					| .removeHeader()

				//- Method description
				section.description
					:markdown
						Alias de [response.removeHeader(name)](http://nodejs.org/api/all.html#all_response_removeheader_name) de Node.


			//- Method
			section.method
				h3#method-addTrailers: code
					small gw
					| .addTrailers()

				//- Method description
				section.description
					:markdown
						Alias de [response.addTrailers(headers)](http://nodejs.org/api/all.html#all_response_addtrailers_headers) de Node.


			//- Method
			section.method
				h3#method-write: code
					small gw
					| .write()

				//- Method description
				section.description
					:markdown
						Alias de [response.write(chunk, [encoding])](http://nodejs.org/api/all.html#all_response_write_chunk_encoding) de Node.


			//- Method
			section.method
				h3#method-end: code
					small gw
					| .end()

				//- Method description
				section.description
					:markdown
						Alias de [response.end([data], [encoding])](http://nodejs.org/api/all.html#all_response_end_data_encoding) de Node.


			//- Method
			section.method
				h3#method-close: code
					small gw
					| .close()

				//- Method description
				section.description
					:markdown
						Cierra y finaliza el objeto gangway.
						Antes de cerrarse se emite el [evento close](#event-close), y despúes de cerrarse el [evento closed](#event-closed).
						Cuando se ejecuta el método `.close()` también se escribe en el [logger la información](https://github.com/bifuer/pillars/blob/master/lib/gangway.js#L202).						

			//- Method
			section.method
				h3#method-setCookie: code
					small gw
					| .setCookie()

				//- Method description
				section.description
					:markdown
						Guarda una nueva cookie para el envío en la respuesta.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.setCookie(name, value, config);
					:markdown
						+ name: **String** nombre de la cookie.
						+ value: **String** valor de la cookie.
						+ config: **objeto** que puede contener los siguientes parámetros; objeto de configuración de la cookie.
							+ domain: donde va a funcionar la cookie.
							+ path: define el alcance de la cookie. (Un path dentro de un dominio, por ejemplo)
							+ expires: cuando expira. 
							+ maxAge: máximo número de segundos que debe tener la cookie.
							+ secure: si es segura.
							+ httpOnly: si es una cookie solo compatible con el protocolo http.

			//
				//- Method syntax
				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.setCookie(
							name: "userPreferences",
							value: ,
							config:{
								expires: 
							}
						);


			//- Method
			section.method
				h3#method-i18n: code
					small gw
					| .i18n()

				//- Method description
				section.description
					:markdown
						El método `.i18n` es usado junto con el método `.render()` para implementar en las páginas la internacionalización.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.i18n(nodo, params);
					:markdown
						+ nodo: **String**, nodo al que hace referencia.
						+ params: objeto con variables a pasar al template.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.i18n("example.h1");

					:markdown
						> [Ver el tutorial de i18n.](../tutorials/i18n.jade)


			//- Method
			section.method
				h3#method-file: code
					small gw
					| .file()

				//- Method description
				section.description
					:markdown
						Envía al cliente un archivo y finaliza la petición.
						Gestiona el sistema de caché e implementa el protocolo de partes, esto quiere decir que realiza la negociación automática de rango de bytes en la descarga, por lo que permite descargas por partes y streaming.
						Si el archivo a enviar es de menor tamaño que el declarado en `ENV.server.maxZipSize` se realiza compresión del archivo y cambia el encoding a deflate o gzip.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.file(filename, clientname, download);

					:markdown
						+ filename: **String**, fichero a enviar, dentro de tu sistema de archivos del servidor.
						+ clientname: Opcional, **String** con el nombre del fichero para el cliente, en caso de que no sea el mismo que el original.
						+ download: **Boolean**. True para forzar el diálogo de descarga. Por defecto es *false*.

						> Nota: Adicionalmente, el archivo será comprimido antes de su envío y quedará guardada su versión comprimida para sucesivas peticiones, este método es compatible con el protocolo de partes HTTP por lo que si la descarga es interrumpida podrá continuar en una siguiente solicitud desde el último byte recibido. Este método también tiene gestión de caché automática, por lo que si el cliente ya tiene el archivo no volverá a ser enviado y se responderá con un código 304.


				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.file("document.pdf");

			//- Method
			section.method
				h3#method-cacheck: code
					small gw
					| .cacheck()

				//- Method description
				section.description
					:markdown
						Permite gestionar la caché del cliente, debemos pasar un objeto Date indicando la última fecha de modificación del contenido que será enviado, este método responderá con false si el cliente no tiene cacheado el contenido y true junto con un 304 automáticamente si el cliente ya dispone del contenido. La forma ideal de utilizar este método es como condición en una sentencia if, de la forma if(!cacheck(date)){}, como vemos en el ejemplo.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.cacheck( date );
					:markdown
						+ date: **String** con la fecha de la última modificación.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						require('../../pillars.js').start();

						var route = new Route(function(gw){

							var date = new Date("2015-01-02");

							if (!gw.cacheck(date)){
								gw.render("example.jade", 
									{
													title:"Título de la página",
													h1: "h1 de la página",
													contents: "Contenidos de la página"
									}
								); 
							}
						});

						addRoute(route);


						/*
						Peticiones al servidor y mensajes por consola: 

							Primera petición, se envían datos al cliente: 

								INFO pillars.gangway.close
								GET: localhost:3000/ [200]  417bytes 36ms 

							Segunda petición, no se envían datos, el cliente ya descargó la página, 
							y con un código de estado 304, le decimos al cliente que recargue lo que ya tiene. 
							Se reducen tiempos de proceso y peso de la respuesta, reduciendo el tiempo de carga:

								INFO pillars.gangway.close
								GET: localhost:3000/ [304]  0bytes 4ms 

						*/
			//- Method
			section.method
				h3#method-authenticate: code
					small gw
					| .authenticate()

				//- Method description
				section.description
					:markdown
						Emite una cabecera HTTP especial para que en cliente aparezca el mensaje de "introduzca nombre de usuario y contraseña".

						> Se podría decir que el conjunto .authenticate() y .auth son similares a la restricción de acceso que se realiza en el archivo .htaccess en otros servidores HTTP.


				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.authenticate(msg);

					:markdown
						+ msg: **String**. Mensaje a mostrar al usuario.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						require('../../pillars.js').start();

						var route = new Route(function(gw){

							if(gw.auth && gw.auth.user=='javi' && gw.auth.pass=='1234'){
								gw.send('secret!');
							} else {
								gw.authenticate("Escribe tu nombre y contraseña");
							}

						});

						addRoute(route);


			//- Method
			section.method
				h3#method-redirect: code
					small gw
					| .redirect()

				//- Method description
				section.description
					:markdown
						Redirección a la URL indicada.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.redirect(urlToRedirect);

					:markdown
						+ urlToRedirect: **String**. URL de la redirección.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.redirect("www.pillarsjs.com");

			//- Method
			section.method
				h3#method-head: code
					small gw
					| .head()

				//- Method description
				section.description
					:markdown
						Método que es llamado antes de cerrar la conexión. Setea las cabeceras HTTP del response.
						Este método emite dos eventos, por si el desarrollador quiere insertar código antes o depués de componer las cabeceras HTTP.



			//- Method
			section.method
				h3#method-send: code
					small gw
					| .send()

				//- Method description
				section.description
					:markdown
						Método para enviar una respuesta al cliente. 
						Si la respuesta es un string se envía como *text/html* y si es un objeto lo envía como objeto parseado tipo *application/json*.
						Cuando se llama al método `.send()` finaliza la ejecución del route en cuestión.

						Este método se encarga de componer también las cabeceras HTTP y enviarlas a cliente, por lo que este proceso transparente.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.send(data,type);

					:markdown
						+ data: **String**
						+ type: Opcional. "text/html" o "application/json"


				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.send("Secret!");


			//- Method
			section.method
				h3#method-json: code
					small gw
					| .json()

				//- Method description
				section.description
					:markdown
						Envía al cliente una respuesta parseada como json. También se encarga de componer las cabeceras HTTP y enviarlas a cliente, por lo que este proceso transparente.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.json(data);

					:markdown
						+ data: *'application/json'* object.						

				//- Method ejemplo
				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var dataPerson = {
							"id":"246874113",
							"name": "myname",
							"surname": "mysurname"
						}

						gw.json(DataPerson);


			//- Method
			section.method
				h3#method-text: code
					small gw
					| .text()

				//- Method description
				section.description
					:markdown
						Envía al cliente la respuesta parseada como *'text/plain'*. Compone también las cabeceras HTTP y enviarlas a cliente, por lo que este proceso transparente.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.text(data);

					:markdown
						+ data: *String*.	

				//- Method syntax
				section.syntax
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.text("Texto plano");


			//- Method
			section.method
				h3#method-html: code
					small gw
					| .html()

				//- Method description
				section.description
					:markdown
						Envía al cliente la respuesta parseada como *'text/html'*. Compone también las cabeceras HTTP y las manda en el envío, por lo que este proceso transparente.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.html(data);

					:markdown
						+ data: *'text/html'* object.	

				//- Method syntax
				section.syntax
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.html();


			//- Method
			section.method
				h3#method-render: code
					small gw
					| .render()

				//- Method description
				section.description
					:markdown
						Este método permite enviar al cliente un template renderizado. Hace uso de la librería Renderer. Por defecto está añadido el motor Jade para la creación de templates, pero puedes añadir los que quieras con el método [`.addEngine()` de la librería Renderer]().

						Al usar el método .render() desde Gangway, tendremos disponible en el layout el objeto gw, i18n y util.  

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.render( template, locals ) 

					:markdown
						+ template: ruta del template.
						+ locals: Opcional. Variables locales que existan en la ejecución del fichero .jade. Gangway (gw), i18n y util se le pasa como locals. 
						

				//- Method syntax
				section.syntax
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.render("example.jade", {title:"Título de página", h1:"h1 de la página"} );

					:highlight(lang='javascript')
						// example.jade
						title=title
							h1=h1
							El idioma es #{gw.language}



			//- Method
			section.method
				h3#method-error: code
					small gw
					| .error()

				//- Method description
				section.description
					:markdown
						Compone una página genérica de error HTTP, opcionalmente se le puede pasar un mensaje para detalles.
						El uso viene dado cuando el cliente visita una URL que no existe, momento en el cual debemos enviar un error HTTP. 

						Otro ejemplo, en una Sentencia try-catch y se ejecuta el cath. Lo mejor es enviar error(500). 

						De otra forma, si enviaramos al cliente un mensaje de texto plano como: "esta página no existe", y una araña visita el contenido, parecerá que sí hay contenido. Por lo que cuando nos encontramos en esta situación, lo más coherente es emitir un error 404.
						Por lo tanto emitir un error 404 debe ser común en el desarrollo de una aplicación Web.

						El template por defecto de error es error.jade.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:codesyntax
						.error(errorCode [, text]) 

					:markdown
						+ errorCode: Código de error HTTP, [puedes consultar este listado](http://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP#4xx_Errores_del_cliente).
						+ text: Optional. **String** con texto a mostrar al cliente.

				//- Method syntax
				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						gw.error(404, "La página no existe");



		//- Eventos
		section.events
			h2#events Eventos

			section.event
				h3#event-close: code
					| close

				:markdown
					Dispara el evento `close` cuando se comienza a cerrar el objeto gangway. 

				:highlight(lang='javascript')
					//Capturar el evento
					gw.on('close');


			section.event
				h3#event-closed: code
					| closed

				:markdown
					Dispara el evento `closed` cuando se cierra y finaliza el objeto gangway. 

				:highlight(lang='javascript')
					//Capturar el evento
					gw.on('closed', function(){
						console.log("Evento capturado");
					});
