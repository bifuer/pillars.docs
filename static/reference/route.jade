include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'Clase Route',url:'/pillars/docs/reference/route.jade'}];
	+reference-layout("Pillars.js Reference - Clase Route - 'make it easy!'",path)

		#title
			h1 Clase Route
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/lib/Route.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				El sistema de enrutado de Pillars.js se basa en objetos de la clase Route. La **creación del objeto** acepta como parámetros una *configuración* y el *handler*. El *handler* se ejecutará cuando la **petición de usuario** coincida con la *configuración* del objeto.

				Los objetos de la clase Route **permiten crear el enrutado de la aplicación** dotando a ésta de un **enrutado dinámico** y por lo tanto, pudiendo **conectar** y **deconectar** rutas de forma dinámica, es decir, con la aplicación en funcionamiento. Los objetos route se añaden o conectan a la aplicación mediante `ENV.addRoute()` y se desconectan mediante `ENV.removeRoute()`, dejando éste de estar disponible. 

				También son **anidables** por lo que **organizan y agrupan funcionalidades** de la aplicación. Tienen la versatilidad de crear estructuras arbóreas donde el nodo raíz será el que se conecte a la aplicación mediante `ENV.addRoute()` ofreciendo la funcionalidad implementada en todo el árbol de n-nodos. Las estructuras creadas podrán ser árboles n-arios de altura h. El sistema de enrutado, por lo tanto, no tendrá que buscar coincidencia en todos los *parámetros de configuración* de todas las rutas añadidas de forma lineal y completa, sino que recorrerá sólo los hijos directos del nodo raíz en busca de coincidencias. 

				El [Plugin routes](/pillars/docs/reference/plugins.jade#plugin-router) es el encargado de realizar el enrutado en base a los objetos route añadidos a `ENV`.
				
			
		//- Syntax
		section.syntax
			h2#syntax Constructor
			codesyntax.
				route = new Route( configuration, handler );

			:markdown
				+ **configuration**: Opcional. Conjunto de *parámetros de configuración* del route. En la creación se pueden configurar las siguientes opciones: 
					+ [id](#property-id): Identificador del route.
					+ [path](#property-path): path al que responderá.
					+ [host](#property-host): nombre o ip de host que atenderá.
					+ [active](#property-active): si está activo o no. En el caso de no estar activo, no responderá.
					+ [method](#property-method): **método/s de la petición HTTP** que acepta el route. Acepta uno o varios. Soporta HEAD, GET, POST, PUT, DELETE, TRACE, OPTIONS y CONNECT.
					+ [https](#property-https): define si el route responderá o no en el servidor https definido en [`ENV.server`](/pillars/docs/reference/entorno.jade#property-server).

				+ **handler**: Opcional. Manejador que se ejecutará siempre y cuando la petición de usuario coincida con la *configuración* del objeto route. El handler siempre recibe como parámetro el [objeto gangway](gangway.jade).


			:highlight(lang='javascript')
				// Creación más básica de un objeto route. 
				// Al omitir el objeto de configuración se establecen los valores por defecto

				var route = new Route(function(gw){
					gw.send("Hola Mundo");
				});

			:highlight(lang='javascript')
				// Creación de un objeto route con id 'web' y path '/web'. 
				// El manejador envía al cliente el renderizado del archivo example.jade

				var route = new Route(
					{
						id: "web",
						path: "/web/"
					},
					function(gw){
						gw.render("example.jade");
					}
				);

			:highlight(lang='javascript')
				// Creación de un objeto route con id 'nodo-padre' sin controlador, por lo que 
				// la aplicación no responderá en /. Y creación
				// de otros dos routes hijos dependientes de éste.

				var route = new Route({id: 'nodo-padre'});

				route.addRoute(
						{path: 'hola' }, 
						function(gw){
							gw.send("Hola!!");
						});

				route.addRoute(
						{path: 'adios'}, 
						function(gw){
							gw.send("Adios! :P");
						})
				;

				//Añadimos el objeto route al entorno ENV

				addRoute(route);

		//- Description
		section.description
			h2#description Descripción
			:markdown
				La arquitectura de la aplicación web se define mediante objetos route. Son anidables, editables en ejecución y se pueden eliminar, y para ello necesitaremos siempre el identificador del objeto. 

				Los *parámetros de configuración* con los que es instanciado el objeto route es de vital importancia para que se ejecuten, o no, **Plugins** instalados en la aplicación, ya que serán estos parámetros los que disparen los plugins pertinentes. Por lo tanto los plugins se ejecutan, ante una configuración concreta de un objeto route. De esta forma tendremos instalados plugins en el sistema, y no tendrán porqué ejecutarse todos necesariamente, dependerá de la configuración del route y de que esta configuración coindica con la petición de usuario. 

				El objeto se puede declarar sin configuración, por lo que toma los valores predeterminados. También se puede declarar sin manejador, por lo que en este caso el objeto route actuaría como **elemento organizativo**.

			:markdown
				> Los parámetros de configuración del route adquieren bastante importancia cuando combinamos objetos route y plugin, ya que será en este objeto de configuración *configuration* donde activaremos los plugins que requiramos en el route.


						
		//- Properties
		section.properties
			h2#properties Propiedades

			//- Property
			section.property
				h3#property-id: code
					small Route.prototype
					| .id

				//- Property description
				section.description
					:markdown
						**String** identificador del objeto route. Si no se declara el id en la creación del objeto, se autogenera. 

					:highlight(lang='javascript')
						var route = new Route(function(gw){gw.send("Hola Mundo")});
						console.log(route.id);
						//Imprime: i47a45wc6
						route.id = "myRoute";
						console.log(route.id);
						//Imprime: myRoute


			//- Property
			section.property
				h3#property-path: code
					small Route.prototype
					| .path

				//- Property description
				section.description
					:markdown
						Path al que responderá el route. Por defecto es '/'. **String**. 

						Están soportadas las rutas parametrizadas por lo que están permitidas las formas `path:'/*:var'`, `path:'/:var'`, etc. Para más información sobre rutas parametrizadas consulta [este tutorial](/pillars/docs/tutorials/client-server.jade#example-03).


			//- Property
			section.property
				h3#property-method: code
					small Route.prototype
					| .method

				//- Property description
				section.description
					:markdown
						**Método de petición** que acepta el route. Para un sólo método acepta un **String**, para dos métodos se setea como **Array**.

					:highlight(lang='javascript')
						route.method = "GET"; //sólo acepta GET 
						route.method = ["GET","POST"]; //acepta GET y POST

					:markdown
						La propiedad `.method` es **heredable** en una estructura arbórea de objetos route. Sigue el siguiente patrón: 
						+ Si el padre 


				//- Property
			section.property
				h3#property-https: code
					small Route.prototype
					| .https

				//- Property description
				section.description
					:markdown
						Esta propiedad define si el route responderá en https, http o ambas.
						La propiedad `https` podrá tomar 2 valores: 
						+ **true**: el objeto route sólo responde en https.
						+ **false**: el objeto route sólo responde en http.

						Si no se define la propiedad https el valor será undefined, por lo que el objeto route responderá tanto para http como para https.

					:highlight(lang='javascript')
						route.https = true;

			//- Property
			section.property
				h3#property-host: code
					small Route.prototype
					| .host

				//- Property description
				section.description
					:markdown
						Host al que responderá el route. **String**. Por defecto es `*`, todos.

					:highlight(lang='javascript')
						route.host = "www.pillarsjs.com";		

					:markdown
						> Esta propiedad es útil si se requiere que un objeto route sólo responda cuando el cliente esté visitando un host específico como el del ejemplo.			

			//- Property
			section.property
				h3#property-routes: code
					small Route.prototype
					| .routes

				//- Property description
				section.description
					:markdown
						Sólo lectura. Devuelve un **Array** con todos los objetos route hijos.

					:highlight(lang='javascript')
						var home = new Route({id:"home"},function(gw){
							gw.send(home.routes);
						});

						var web = new Route({id:"web",path:"/web"},function(gw){
							gw.render("example.jade");
						});

						var fileDownload = new Route({id:"file", path:"file", host:"localhost"},function(gw){
							gw.file("example.jade");
						});

						home.addRoute(web);
						home.addRoute(fileDownload);

						addRoute(home);

						/*En http://127.0.0.1:3000/ Imprime: 
						[
							{
								"domain":null,
								"_events":{},
								"_maxListeners":10,
								"id":"web",
								"path":"web",
								"handlers":[ [Function] ],
								"params":[],
								"pathRegex":"/^\\/?web\\/?/i",
								"method":["GET"],
								"priority":1000,
								"active":true,
								"routes":[]
							},
							{
								"domain":null,
								"_events":{},
								"_maxListeners":10,
								"id":"file",
								"path": "file",
								"host": "localhost",
								"handlers":[ [Function] ],
								"params":[],
								"pathRegex":"/^\\/?file\\/?/i",
								"path":""
								,"method":["GET"],
								"priority":1000,
								"active":true,
								"routes":[]
							}
						]
						*/

					:markdown
						> Al ser Route un EventEmitter en el objeto de propiedades del route tenemos también las propiedades: `domain`, `_events` y `_maxListeners`


			//- Property
			section.property
				h3#property-handlers: code
					small Route.prototype
					| .handlers

				//- Property description
				section.description
					:markdown
						Listado de manejadores de un route. Los usual es que un objeto route tenga un sólo manejador, aunque es posible crearlo con varios manejadores, conocidos como **middleware**. 

					:highlight(lang='javascript')
						//Creación del middleware
						var msg = function(gw,next){ 
							gw.data.myData="Hola Mundo!!!"; 
							next(); 
						};

						//Creación del route con un middleware
						var home = new Route(
							{id:"home"},
							msg,
							function(gw){
								gw.send(gw.data.myData);
							}
						);

						addRoute(home);

						//Imprime: Hola Mundo!!!

					:markdown
						Si bien es cierto, que deberemos sopesar la opción de incluir manejadores intermedios de esta forma, o incluir directamente un Plugin.

						La propiedad `.handlers` devuelve un Array con todos los manejadores del route. Podemos realizar modificaciones de la propiedad: 


					:highlight(lang='javascript')
						console.log(home.handlers);

						/*Imprime: 
							[ [Function], [Function] ]
						*/

						home.handlers.shift(); // Eliminamos el primer elemento del Array
						console.log(home.handlers);

						/*Imprime: 
							[ [Function] ]
						*/


			//- Property
			section.property
				h3#property-priority: code
					small Route.prototype
					| .priority

				//- Property description
				section.description
					:markdown
						**Integer** que especifica la prioridad de ejecución del route. Por defecto es 1000. 
						Cobra sentido cuando pensamos en acciones que se tienen que ejecutar antes de que la petición del cliente pase por el enrutado, por ejemplo.
						Por defecto es 1000.

			//- Property
			section.property
				h3#property-active: code
					small Route.prototype
					| .active

				//- Property description
				section.description
					:markdown
						**Boolean** que define si el route está activo o no. Por defecto es **true**, activo.

					:highlight(lang='javascript')
						home.active = false;
						//En este momento la aplicación no respondería



			//- Property
			section.property
				h3#property-params: code
					small Route.prototype
					| .params

				//- Property description
				section.description
					:markdown
						Devuelve un Array de **sólo lectura** que acumula los parámetros que se han pasado en la creación de la ruta.
						GET, POST Y PATH. 

					:highlight(lang='javascript')
						var users = new Route({path:"/user/:param1/:param2"},function(gw){
							gw.send(users.params);
						});

						addRoute(users);

						/* Visitando http://127.0.0.1:3000/user/javi/fotos - Imprime: 
							[
								"param1",
								"param2"
							]
						*/


					:markdown
						> El contenido de los parámetros pasados por la URL, así como del POST y del GET, pueden ser consultados con el objeto gangway. [`gw.params`](/pillars/docs/reference/gangway.jade#property-params).
						


			//- Property
			section.property
				h3#property-pathRegex: code
					small Route.prototype
					| .pathRegex

				//- Property description
				section.description
					:markdown
						Propiedad de **sólo lectura** que contiene la expresión regular de la propiedad `path`. Si modificamos `path`, `pathRegex` se actualiza automáticamente.

		//- Methods
		section.methods
			h2#methods Métodos

			//- Method
			section.method
				h3#method-addroute: code
					small Route.prototype
					| .addRoute()

				//- Method description
				section.description
					:markdown
						Añade un objeto de la clase route al objeto route padre. De esta forma creamos estructuras anidadas. 
						Para añadir un 'hijo' podemos hacerlo: 
						+ Creando primero el route hijo y posteriormente agregarlo mediante `addRoute()`
						+ O, pasando por parámetro a `addRoute()` los valores del route hijo para su creación y adicción simultánea.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					:markdown
						El método `.addRoute()` admite dos tipos de parámetros. Bien el *objeto route* ya creado, o la *configuración* y el *handler* para la creación y adicción del mismo.
						
					codesyntax.
						.addRoute( route Object );

					:markdown
						+ *route Object*: objeto route creado previmente con `new Route(*configuration*, *handler*)`.

					codesyntax.
						.addRoute( [configuration] , [handler] );

					:markdown
						+ *configuration* : Conjunto de parámetros de configuración para la creación del route.
						+ *handler* : manejador para el route que se va a crear.

						> Nota: Si deseamos anidar objetos routes debemos tener en cuenta que debemos utilizar la primera forma, ya que con la segunda resultaría imposible.

					:markdown
						> Nota: El objeto se puede declarar sin configuración, por lo que toma los valores predeterminados. También se puede declarar sin manejador, por lo que en este caso el objeto route actuaría como elemento organizativo.

				//- Method syntax
				section.example
					h4 Ejemplos
					:highlight(lang='javascript')
						// route padre 'home'
						var home = new Route({id:"home"},function(gw){
							gw.send("Home");
						});

						// Creación route hijo 'web'
						var web = new Route({id:"web",path:"/web"},function(gw){
							gw.render("example.jade");
						});

						// Adicción al route padre 'home' del route hijo 'web'
						home.addRoute(web);

						// Creación del route hijo 'fileDownload' y adicción al route padre 
						// 'home' en un solo paso.
						home.addRoute(
							{
								id:"file", 
								path:"file", 
								host:"localhost"
							},
							function(gw){
								gw.file("example.jade");
							}
						);
						
						// Adicción del route padre al entorno. 
						addRoute(home);

					:markdown
						> Hay que notar que con el método `addRoute(home)`, lo estamos realizando sobre `ENV`, y con `route.addRoute()`, se ejecuta el método del objeto, por lo que estamos añadiendo un 'hijo' al route home.

				//- Method
			section.method
				h3#method-add: code
					small Route.prototype
					| .add()

				//- Method description
				section.description
					:markdown
						Alias de `.addRoute()`.


				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						.add( route Object );

					:markdown
						+ *route Object*: objeto route creado previmente mediante `new Route(*configuration*, *handler*)`.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var home = new Route({id:"home"},function(gw){
							gw.send("Home");
						});

						var web = new Route({id:"web",path:"/web"},function(gw){
							gw.render("example.jade");
						});

						var fileDownload = new Route({id:"file", path:"file", host:"localhost"},function(gw){
							gw.file("example.jade");
						});

						home.add(web);
						home.add(fileDownload);

						addRoute(home);


				//- Method
			section.method
				h3#method-getRoute: code
					small Route.prototype
					| .getRoute()

				//- Method description
				section.description
					:markdown
						Dado el identificador de un objeto route hijo devuelve el objeto hijo.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						.getRoute( route identificator );

					:markdown
						+ *route identificator*: **String** identificador del objeto route.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var web = home.getRoute('web');						

				//- Method
			section.method
				h3#method-removeRoute: code
					small Route.prototype
					| .removeRoute()

				//- Method description
				section.description
					:markdown
						Dado el identificador de un objeto route hijo, elimina el objeto hijo.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						.removeRoute( route identificator );

					:markdown
						+ *route identificator*: **String** identificador del objeto route.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var web = home.removeRoute('web');	
						// Dejaría de estar disponible las funcionalidades en /web



		//- Eventos
		section.events
			h2#events Eventos

			section.event
				h3#event-idUpdate: code
					| idUpdate

				:markdown
					 Evento que se emite cuando el id del route es actualizado.

				:highlight(lang='javascript')
					//Creación del route
					var route = new Route(function(gw){
						gw.send("Message");
					});

					//Capturar el evento
					route.on('idUpdate', function(){
						console.log("Evento idUpdate capturado");
					});

					route.id = "home";

					/*Imprime: 
						Evento idUpdate capturado
					*/


			section.event
				h3#event-priorityUpdate: code
					| priorityUpdate

				:markdown
					Evento que se emite cuando la prioridad del route es actualizada.

				:highlight(lang='javascript')
					//Creación del route
					varr route = new Route(function(gw){
						gw.send("Message");
					});

					//Capturar el evento
					route.on('priorityUpdate', function(){
						console.log("Evento priorityUpdate capturado");
					});

					route.priority = 1001;

					/*Imprime: 
						Evento priorityUpdate capturado
					*/

		

