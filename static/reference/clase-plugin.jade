include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/reference/'},{label:'Clase Plugin',url:'/reference/plugin.jade'}];
	+reference-layout("Pillars.js Reference - Clase Plugin - 'make it easy!'",path)

		#title
			h1 Clase Plugin
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/lib/Plugin.js") Source

		//- Summary
		section.summary
			h2#summary Sumario  
			:marked
				La Clase Plugin permiten ampliar las funcionalidades del framework. 

				Estas funcionalidades pueden afectar a todos los controladores del proyecto o sólo a aquellos en los que la configuración del *objeto route* lo indique.

				Una vez instanciado el plugin, es necesario añadirlo a [`project.plugins`](project.jade#property-plugins), que es la propiedad de nuestro proyecto *(project)* que contiene a todos los plugins en el mismo.
					
		//- Syntax
		section.syntax
			h2#syntax Constructor
			:codesyntax
				plugin = new Plugin( configuration, handler );

			:marked
				+ *configuration*: opcional. Objeto de configuración del plugin. En la creación del plugin se pueden configurar los siguientes parámetros: 
					+ [id](#property-id): **String** identificador del plugin. Si no se especifica se autogenera.
					+ [active](#property-active): **Boolean**, indica si está activo o no.

				+ *handler*: Controlador que ejecutará el plugin. El controller siempre recibe como parámetro el [objeto gangway](gangway.jade) y **next**. Que como ya sabemos, el objeto gangway contiene los datos de la petición y tiene métodos para la respuesta, y next que es la forma de indicar al plugin que ejecute, en caso de haberlo, el siguiente plugin.

				
			:highlight(lang='javascript')
				// Creación más básica de un objeto plugin. 
				// Al omitir el objeto de configuración se establecen los valores por defecto

				var plugin = new Plugin(function(gw, next){
					next();
				});

				project.plugins.add(plugin;


				// Creación de un objeto plugin con id 'idPlugin'

				var plugin = new Plugin(
					{
						id: "idPlugin"
					},
					function(gw, next){
						//...
						next();
					}
				);

				project.plugins.add(plugin);


		//- Description
		section.description
			h2#description Descripción
			:marked
				La Clase Plugin es primordial en el funcionamiento del framework, ya que éste está construido a base de Plugins que realizan diversas funciones. 	

				> Ver [Funcionamiento de los Plugins](../started/plugins-avanzado.jade) en Pillars.js. 
			:marked
				> Un *objeto route* podrá determinar gracias a su *configuración* si se ejecuta un Plugin. [Ver configuración route y plugins.](../started/enrutado-avanzado.jade#ejecucion-plugins)	


		//- Properties
		section.properties
			h2#properties Propiedades

			//- Property
			section.property
				h3#property-id: code
					small Plugin.prototype
					| .id

				//- Property description
				section.description
					:marked
						Identificador del objeto plugin. Si no se especifica, se genera un identificador automáticamente.

			//- Property
			section.property
				h3#property-active: code
					small Plugin.prototype
					| .active

				//- Property description
				section.description
					:marked
						**Boolean** que indica si el plugin está activo o no. Por defecto es **true**.
			
		