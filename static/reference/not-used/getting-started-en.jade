include ../.layout.jade
doctype html
html(lang=gw.language)
	+reference-layout("Pillars.js Reference - Getting Started - 'make it easy'")
		h1 Getting Started
			em Pillars.js Reference
		:markdown
			## Setting the environment (Node.js beginners)

			To start using Pillars.js you need to install **NodeJS**, and if you are going to use database connection **MongoDB**, in the followings links you can find and install both; [NodeJS](http://nodejs.org/) and [MongoDB](https://www.mongodb.org/downloads).

			After instalation create a new directory for your first Pillars.js project. In this directory create a *package.json* file (a descriptor for your application) and *app.js* file (your application).

			*package.json* file can operate with a minimal information. It´s enough to indicate that use Pillars.js in the dependency list:

		:highlight(lang='javascript')
			{
			  "dependencies": {
			  		"pillars": "*"
			  }
			}

		:markdown
			> You can find more information about how package.json works on the [npmjs](https://www.npmjs.org/doc/files/package.json.html) website.
			
			Use *npm* to load dependencies, in the project directory runs in the command prompt `npm install`. This commmand create a directory */node_modules* in which will be loaded all the dependencies described in *package.json* file.

			Now we can start to use Pillars.js. You have the "Hello World" code below *(app.js file)*:  
			
		:highlight(lang='javascript')
			require('pillars').start();

			addRoute(new Route(function(gw){
			  gw.send("Hello World");
			}));

		:markdown
			Once you write code, execute in command prompt `node app.js` and visit your `http://localhost:3000/`

			> Once installed and running you can find this documentation in `http://localhost:3000/pillars/docs/reference/` too to consult it off-line ;)

		:markdown
			## The Framework

			Main concepts in Pillars.js are:
			- **ENV**: Main place to configure application environment. `ENV` allows add route controllers (Route Class) and Plugins among other functions.
			- **Route**: Controller. It´s made up of a *configuration* and a *handler*. Configuration defines additional properties, handler receives a gangway object as parameter. Route objects are nestable.
			- **Gangway**: An object with all information of the request and methods to manage the request and response.
			- **Plugin**: Allows add additional controllers to the environment. Plugins can modify how runs Route Class and gangway object, can access to their properties too.

			### ENV (Environment)

			With the global variable `ENV` you can manage the environment of the application. It´s an EventEmitter and it´s the main place to configure the environment, can access to `ENV` properties and methods from  anywhere of application. 

			Set the environment with `require('pillars')` sentence, and will be globally available access to classes, objects and functions necessary to work with Pillars.js; such as `ENV`, `Route`, `Plugin`, `addRoute()` among others.

			For example, we can configure the HTTP Service using `ENV.server`, setting `hostname`and `port` properties, also set the time out with `timeout` or maximum file upload size with `maxUploadSize`.
			

		:highlight(lang='javascript')
			require('pillars');
			ENV.server = {
			        hostname:'localhost',
			        port: 3030,
			        timeout: 30000
			};
		
		:markdown
			Other possibilities are enable `debug` mode or database connection. In this way, is available the `ENV.configure()` method, to configure all properties needed in an only step:

		:highlight(lang='javascript')
			require('pillars').configure(
			  debug: true, // Por defecto false.
			  server: {
			    hostname:'localhost',
			    port: 3030,
			    timeout: 30000
			  },
			  database: {
			    hostname:'localhost',
			    port: 27017,
			    db: 'PillarsExample'
			  }
			);

		:markdown
			> Obviously for database connection is needed to have installed MongoDB.

			By default Pillars.js not start the HTTP Service or database connection. Methods `ENV.start([config[,callback]])` and `ENV.stop([callback])` start and stop the HTTP Service, while `ENV.connect([config[,callback]])` and `ENV.disconnect([callback])` connect and disconnect the database.

			If `.server` or `.database` properties are set, HTTP server starts or database is connected respectively, in each case automatically.

			Finally you have methods that allows manage routes and plugins in application:

			- `addRoute()`: Add a new route to aplication. Through `removeRoute()` and `getRoute()` can delete and modify routes already inserted. `ENV.routes` returns a list of routes in application ordered by priority.

			- `addPlugin()`: Add a new plugin to application. Through `removePlugin()` and `getPlugin()` can delete and modify plugins already inserted. The `ÈNV.plugins` property returns a list of plugins sorted by priority.


			### Route

			This class allows to associate a handler with a route (path) with an specific configuration. A route object consists in a handler and in a several properties that allows to take the control about when and where runs this handler.

			The basic way to create a route object is declaring only the handler, leaving the default properties:


		:highlight(lang='javascript')
			myRoute = new Route(function(gw){
			  gw.send('¡Hello World!');
			});

		:markdown
			Although overrall you need to configure the route objects follows:

		:highlight(lang='javascript')
			myRoute = new Route({ // Configuración
			  id:'Status',
			  path:'admin/status',
			  method:'get'
			},function(gw){ // Manejador
			  gw.send('¡Hello World!');
			});

		:markdown
			Route set default values for the following properties if not specified:
			- `.id`: if you dont specify one, an unique identifier is generated.
			- .path: '/' by default.
			- .method: 'GET' by default.

			**Route objects can have sub-routes**. In the same way that can add route objects to environment `ENV`, is possible to add route objects like 'children' to another route object. This route objects added works like sub-paths, allows organize the routes tree in a more organic way, and as we will see later, working with properties with inheritance, and having groups of controllers with an organized control. 


		:highlight(lang='javascript')
			new Route({
			  id: 'Administration',
			  path: '/admin'
			},function(gw){
			  gw.send('Admin area');
			})
			  .addRoute(new Route({
			    id: 'Status',
			    path: '/status'
			  },function(gw){
			    gw.send('Admin area: Show status');
			}))

		:markdown
			Route object with 'Status' id, respond to the path '/admin/status'. If route object with 'Administrator' id is disabled, not will available all their descendants.

			To establish order in route objects can use `.priority` property, by default is `1000`. This allow to control the order in which they will be checked by the Router.

			Also have the `.active` property, which defaults is `true`, and allows disable a route object with the corresponding descendence.


			### Gangway (gw)

			Gangway is the HTTP request, if you've worked with Node.js `request` and `response` objects will be familiar. In Pillars.js these objects are Gangway properties. A gangway object consists in client request fully parsed and ordered for usage.

			In each HTTP request to the server, a gangway object is created and is sent to the appropriate handler. Some gangway properties and methods:

			- **`.cookie`**: Returns an object with the *cookie* content, if exists.
			- **`.ua`**: An object with information about User Agent, `.mobile` indicate (*boolean*) if client if a mobil device, the rest of properties give us information about Operative System and the Browser. (os, engine, browser).
			- **`.ip`**: Client IP address.
			- **`.accepts`**: Accept headers already resolved and organized by priority.
			- **`.host`**: Hostname or IP address used in request.
			- **`.method`**: Method used in request. (*GET,POST,PUT,DELETE,HEAD*).
			- **`.path`**: Route(path) requested, but only route value, without *host* or *query* parts. This value can be change internally if for some reason a route is redirected to another point of the environment. To know original path use **.`originalPath`** property.
			- **`.query`**: An object with *query* content of the request.
			- **`.params`**: An object with all parameters received in resquest, either by *GET* or *POST*. *POST* values prevail over *GET* if identical.
			- **`.files`**: If files are sent in request, this object include only this files. In `.params` properties can find this files too, together with the rest of parameters was sent.
			- **`.session`**: An object that keep properties between different request from the same client.	
			- **`.referer`**: If request was made through a *link* this parameter indicates the direction that has referenced.

			> Read a larger description and rest of properties in [reference](gangway.jade).

			- **`.setHeader(name, value)`**: Add a header to the response. `getHeader(name)` and `removeHeader(name)` allows read a header value if exists, or delete it.
			- **`.send(data)`**: Send the specified content `data` to the client and ends the request. If data is an *object* will become *json* and the response will be sent as *'aplication/json'*, if data is a *string* will be sent as *'text/html'*.
			- **`.file(path, clientname, download)`**: Send a file to the client. Through `clientname` can specify a file name for client and using `download=true` can force download. File name by default is the file name in server and download by default is *false*. Additionally, the file is **compressed** before sending and a version of this is saved on server to used it in successive request. This method is compatible with **HTTP by parts protocol** so, if download is interrupted, this download will can continue in a next request from the last byte sent.
			- **`.cacheck(lastmod)`**: Allows manage client cache, must pass a *Date* object with the modifying last date of the content to be sent. This method will respond *false* if client hasnt cached the content and *true* with *304* code automatically if client already has content. The ideal way to use this method is in a conditional sentence *if* in this way: `if(!cacheck(lastmod)){}`.
			- **`.authenticate(msg)`**: Send a *basic HTTP authentication* message with *401* code. We can check user credentials in `.auth` property of gangway, this object contains user name and password provided by client in `.user` and `.pass` properties.
			- **`.redirect(location)`**: Redirect the request to other address through *301* code.
			- **`.render(template, locals)`**: Defining the templating route (path) with *template* parameter and environment variables with which to work, send to client the result as HTML, by default the templating engine is *JADE* and cache management templates is automatic. Pillars.js allows add another template engines through `renderer.addEngine(ext,compiler)`.
			- **`.error(code, data)`**: With this method can show *error messages* manually, allows specify a *status-code (404, 500, ...)* and an *Error* object if needed. The *Error* object dont show to the client the error message if `ENV.debug` is set to *false*.


			### Plugin *(brief)*

			This class provides control over the requests in a different level that Route does it. Plugins do not work over routes (paths), but rather are executed serially for each application. Plugins allows extend how Pillars.js works, expanding possibilities.



			> More details of this items in [Pillars.js Reference](#)

			##A simple application

			To create a Pillars.js application start setting environment (`ENV`). We are going to specify a server configuration, access data to database and some additional options. 

			`ENV` is globally set, although a reference to this variable is returned in `require` sentence too. We use this reference to configure the environment through `.configure()` method:

		:highlight(lang='javascript')
			require('pillars').configure({
			  server:{port:3030,hostname:'localhost'}, 
			  // when setting .server property, service starts. 

			  database:{db:'pillarsExample'}, 
			  // when setting .database property, database is connected automatically. 

			  debug:true, 
			  // Show detailed errors and other debugging information.

			  languages:['en', 'es'] 
			  // The first language on the list will be used as default language.
			});

			addRoute(new Route({
			  id:'myFirstRoute', 
			  // Route object identifier, allow to modify or delete it at any time.

			  session:true 
			  // Property used by 'Session' Plugin. 
			  // Start session support for this controller.

			},function(gw){
			  gw.session.count = gw.session.count || 0;
			  gw.session.count++;
			  gw.send('You have seen this message '+session.count+' times');
			}));
		
		:markdown
			In this example we defines some basic properties of the environment and use `.session` gangway property to count the number of times the page is reloaded by the user.

			We have configured a language list, and have established as the default language English, so console messages will be in this language. We will see how to use the translation system in reference and tutorials.

			**Session** Plugin provides the session support, this use `.session` property of Route to start session support for it´s corresponding handler. 

			> Know options of `.server` and `.database` properties in [Pillars.js Reference](#) 

			## Route and Gangway

			Let's now see a use in more detailed for Route and Gangway, in the next example we will create a route structure and will check how to change it´s on running once have been added to the environment.

			***
			App.js

		:highlight(lang='javascript')
			require('pillars').configure({
			  database:{db:'pillarsExample'},
			  debug:true,
			  languages:['en','es']
			}).start();

			var Utilities = new Route({
			  id:'Tools',
			  path:'/tools'
			},function(gw){
				// We can send HTML directly through .html() method. 
				// .send(String) operates in a similar way.  

				// We use .html() to create a simple home page for examples.
			  
			  gw.html(
			    '<h1>Utilidades</h1>'
			    +'<ul>'
			      +'<li><a href="/tools/status">Environment status</li>'
			      +'<li><a href="/tools/source">Source</li>'
			      +'<li><a href="/tools/errorhandler">Internal Error Test</li>'
			      +'<li><a href="/tools/template">tamplate HTML Test</li>'
			      +'<li><a href="/tools/queryparams?a=1&b=2&c=3">Query Parameters Test</li>'
			      +'<li><a href="/tools/pathparams/a/b/c">Path Parameters Test</li>'
			      +'<li><a href="/tools/session">Session Test</li>'
			      +'<li><a href="/tools/secret">Basic Authentication Test</li>'
			      +'<li><a href="/tools/static">Directory</li>'
			      +'<li><a href="/tools/cache">Cache Control</li>'
			      +'<li><a href="/tools/edit-routes">Add a Route Object</li>'
			    +'</ul>'
			  );
			});
			addRoute(Utilities); 
			// or ENV.addRoute(Utilities) equally.

			
			Utilities.addRoute(new Route({
			  id:'Status',
			  path:'/status'
			},function(gw){
			  gw.json(ENV.status); 
			  // Environment status is sent as JSON data.
			  // .json() method send a JS object as application/json. 
			  // .send() has the same running.
			}));

			
			Utilities.addRoute(new Route({
			  id:'Source',
			  path:'/source'
			},function(gw){
			  // With .file() method can send a file to the client. 
			  // In this case, we send application source code. 
			  gw.file('./app.js','Application Source Code');
			  // The second parameter forces a new name for the file
			  // The third parameter (not present now) can force download 
			  // instead of loading in the browser.
			}));

			Utilities.addRoute(new Route({
			  id:'ErrorControl',
			  path:'/errorhandler'
			},function(gw){
			  // Any errors within an Controller will be managed by the framework sending
			  // code 500.
			  var a = b + c;
			  // If .debug mode is true, you'll see the error stack.
			}));

			Utilities.addRoute(new Route({
			  id:'Template',
			  path:'/template'
			},function(gw){
			  // .render() method allow use templates.
			  // Set template path and available local variables.

			  gw.render('./example.jade',{
			    title: 'My first template with Pillars.js',
			    h1: 'Basic template example',
			    contents: '<strong>Hello World!</strong>'
			  });
			  // You can find the template code after this code.
			  // By default Pillars.js use JADE, although you can add other engines to the system.
			  
			}));

			Utilities.addRoute(new Route({
			  id:'Query',
			  path:'queryparams'
			},function(gw){
			  // Sending the query parameter received as JSON object.
			  gw.json(gw.query);
			}));

			Utilities.addRoute(new Route({
			  id:'PathParams',
			  path:'/pathparams/:parameter1/*:restOfPath'
			},function(gw){
			  // When setting 'path' property, you can catch path parameters
			  // Using /: catch only one parameter, while /*: catch any route.
			  gw.json(gw.pathParams);
			}));

			Utilities.addRoute(new Route({
			  id:'Session',
			  path:'/session',
			  session: true 
			  // Some Plugins use properties set in route configuration, in this case
			  // session property in true, active the Sessions Plugin.
			},function(gw){
			  // The Sessions Plugin provides .session property in gangway that allows
			  // save data between different requests.
			  gw.session.counter = gw.session.counter || 0; // Start counter variable.
			  gw.session.counter++;
			  gw.html('Contador:<strong>'+gw.session.counter+'</strong>');
			}));

			Utilities.addRoute(new Route({
			  id:'Authenticate',
			  path:'/secret'
			},function(gw){
			  // This content is only available with authentication
			  // Checking if exists authentication and if is ok, otherwise use .authenticate(msg);
			  if(gw.auth && gw.auth.user=='admin' && gw.auth.pass=='1234'){
			    gw.render('./example.jade',{
			      title: 'The answer to life the universe and everything',
			      h1: 'The answer to life the universe and everything',
			      contents: '<h2>42</h2><blockquote><p>The Hitchhiker´s Guide to the Galaxy</p></blockquote>'
			    })
			  } else {
			    gw.authenticate('You need username and password to view this content');
			  }
			}));

			Utilities.addRoute(new Route({
			  id:'pillarsStatic',
			  path:'/static/*:path'
			  // Using an open path through '/:', this allows capture the rest of the path as a parameter
			},precasts.static({
			  // Through the 'static' precast we create a controller for static directories.
			  directory:'./static', // Start directory to serve.
			  listing:true // Enabling directory listing.
			})));

			Utilities.addRoute(new Route({
			  id:'CacheControl',
			  path:'/cache'
			},function(gw){
			  var lastmod = new Date(0); // Set old date.
			  if(!gw.cacheck(lastmod)){
			    gw.send('This content has not been modified since '+lastmod.toUTCString());
			  }
			  // You can check on console or with development tools as server respond with
			  // a 200 or 304 code, depending on the contents of the cache.  
			}));
			  // Creating a new Route to use later, respond 'ok'
			Extra = new Route({
			  id:'Extra',
			  path:'/new-route'
			},function(gw){
			  gw.send('Ok');
			});

			Utilities.addRoute(new Route({
			  id:'editRoutes',
			  path:'/edit-routes'
			},function(gw){
			  // 
			  // Deleting 'CacheControl' route of the environment.
			  Utilities.removeRoute('CacheControl');

			  // Locating 'ErrorControl' route and modifying '.path' property and priority.
			  Utilities.getRoute('ErrorControl').configure({path:'geterror',priority:900});

			  // Cheching is additional route was added or not.
			  if(!Utilities.getRoute('Extra')){
			    // Adding a new route
			    Utilities.addRoute(Extra);
			  }
			  gw.html('A new route was added, you can visit it <a href="/tools/new-route">here</a>');
			}));



		:markdown
			***
			example.jade

		:highlight(lang='javascript')
			doctype html
			html(lang=gw.language)
			  // By default 'gw' object, 'util' library and 'i18n' function with actual 
			  // language is added to local variables of JADE template.  
			  head
			    title=title
			    meta(charset="utf-8")
			    meta(http-equiv='X-UA-Compatible', content='IE=edge')
			    meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no")
			    link(rel='stylesheet', href='//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css')

			  body
			    .container
			      header#header
			        h1=h1
			      #page!=contents

		:markdown
			In this example we use `.start()` method to start the service. This method accepts as parameter ENV.server, a collection of properties, which in this case we have not setting, so the server start with default values, port 3000 and any host. 
			
			You can check how different gangway methods runs with nested Route structures, in the last lines you can see how modify a structure already created and running, adding new items or modifying existing ones.

			Route system structure allows create packages of functionalities, that can be used later by others. And allows adapt performance to own application needs, deleting or modifying parts of structure.

			Additionally is interesting to know that `ENV`, `Route` and `Gangway` are eventEmitter, so provides an additional control over performance.

			## Plugins

			Plugins allows create global controllers that can access to Route properties, extend Gangway functions or modify general framework performance.

			Plugins are the central part of the management requests in Pillars.js. When a HTTP request arrives to the Pillars.js server, a new gangway object is instantiated, this object is sent to a plugins chain organized that passed control of this gangway to the next plugin.

			Building a Plugin is very similar to Building a Route, specifying properties and a handler:
			

		:highlight(lang='javascript')
			myPlugin = new Plugin({
			        id: 'paramsLog',
			        priority: 1000
			},function(gw,next){
			        console.log(gw.params);
			        next();
			});
			addPlugin(myPlugin);

		:markdown
			This plugin sends parameters of any request received to console and gives control to the next plugin. Plugin receive two parameters on handler `gw` and `next`; `next` is a function that allows gives control to the next plugin.

			**A Plugins integrated on Pillars.js is `Router`**. `Router` decide which object route is the charge to address a request, passing control to the Route handler when plugins chain ends.

			When control arrives to `Router` Plugin, search the suitable Route to service the request, if found, save reference in the `.routing` gangway property. Otherwise a 404 code is responded and the Plugins chain is stopped.

			Any Plugin that runs after `Router` has access to `gw.routing` property. `gw.routing` has the next format: 
			- `routing.routes`: Routes chain that has been followed, if they have been nested, in order of descent.
			- `routing.handlers`: handler or handlers that Route respond to the path. This handlers will be called when plugins chain ends.
			- `routing.options`: Object with Route properties that manage the request, own and inherited of others higher Routes.
			- `routing.check(prop, preset)`: Utility to check Route properties allowing receive the `preset` value if property not defined.
			
			
			`gw.routing` allows create Plugins that only run with specific configurations Route, for example a Plugin that perform log, but only for Route objects that have `log` property in true.


		:highlight(lang='javascript')
			myPlugin = new Plugin({
			        id: 'logPlugin'
			},function(gw,next){
			        var log = gw.routing.check('log');
			        if(log===true){
			                console.log(gw.path,gw.params);
			        }
			        next();
			});
			addPlugin(myPlugin);

		:markdown
			Through Plugins we can act before and after Router, so can for example; modify the route, or methods before Router, or check properties or Route object when this route has already been selected. Each Plugin can modify or extend Gangway properties and methods for handler. For example, Sessions Plugin provides `gw.session` property which stores values saved in session and saves changes once request ends.

			Plugins allows a way to add functionalities to Pillars.js or modify general performance, this is useful to create generic Plugins that adds functions to any project or to new common tasks between different handlers, being able to **shoot Plugins only with certain configurations of Route**. 
