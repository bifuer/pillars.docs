include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'Plugins en Pillars.js',url:'/pillars/docs/reference/plugins.jade'}];
	+reference-layout("Pillars.js Reference - Plugins en Pillars.js - 'make it easy!'",path)

		#title
			h1 Plugins en Pillars.js
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/lib/plugins") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:marked
				El framework Pillars.js en su versión actual ofrece una serie de plugins integrados, se listan a continuación en orden de ejecución
				
				+ Plugin langPath, para la gestión de la ruta en múltiples idiomas. `http://www.pillarsjs.com/en/entorno/` `http://www.pillarsjs/de/entorno`
				+ Plugin encoding, para Codificaciones no válidas.
				+ Plugin router, Plugin de enrutado y responsable de todo el sistema de enrutado de Pillars.js.
				
				+ **Máximo tamaño permitido de la petición HTTP**. Permite definir para un controlador concreto (objeto route) su tamaño máximo de petición permitido. 
				+ **Compatibilidad con CORS**. Establece compatibilidad con CORS.
				+ **Compatibilidad con el método OPTIONS** del protocolo HTTP.
				+ **Sistema de Sesiones**. Permite establecer sesiones de usuario.
				+ **Sistema de Usuarios**. Permite de una forma sencilla tener un sistema de usuarios con template de login integrado.
				+ **Lector del cuerpo de la petición HTTP**.
				+ **Directorio estático**. Ofrece el soporte de directorio estático de ficheros.
	
				+ **langPath.js** [en, es] - coge la ruta, detecta si el comienzo de la ruta coincide con algun idioma de los delcarados en languages que no sean el primero. elimina del gw.path el idioma correspondiente.(/es/tools -> /tools). Actúa sobre gangway antes del router. Una vez hecho eso setea gw.languages al idioma que ha eliminado.
				+ **encoding.js**: filtro chorra que devulve un 406, que es codificación no válida.
				+ **router.js**: cuando llega pa ejecutarse el plugin router, empieza a comprar el listado de objetos route y los constrasta con el objeto gangway, que coincidan el path, host, method y protocolo http o https. El plugin mira en ENV los routes que se han añadido directamente a ENV. Si alguno coincide, pues sigue comparando con los hijos. Conforme va localizando los que coindicen, lo acumula en gw.routing; options. propiedades de cada route, al final me queda un listado de propiedades heredadas. Check: chequeo rápido de los options. Routes: array de route por los que pasa. handlers: handler del route que atiende finalmente la petición.
				+ **maxUploadSize.js**: para cualquier petición de usuario se comprueba que el tamaño del cuerpo de la petición no supere el tamaño declarado en ENV.maxUploadSize. Este plugin se puede customizar. Cada route tiene una propiedad de configuración que es maxsize que nos permite especificar si para ese route concreto no le echa cuenta a la propiedad ENV.maxUploadSize. Utiliza la propiedad maxsize que permite especificar el tamaño máximo de la petición con un valor concreto y no el valor por defecto que viene de la propiedad ENV.maxUploadSize. El error devuelto en el caso de superar el tamño es un 413. 
				+ **CORS.js**: Cross-origin resource sharing. Compartición de recursos entre distintos dominios. De que dominio utilizan recursos tuyos, porque cuando se hace una solicitud http, desde un dominio diferente, a ese otro en el encabezado HTTP aparece origin, que es desde donde se está haciendo lapetición. COMO FUNCIONA CORS. utiliza la propiedad cors del route. cors: true, cors: false, o un array de los dominios que van a poder hacerme peticiones http de ese tipo.
				+ **OPTIONS.js**: POST, GET, PUT, Y el nuevo.... OPTIONS :O que sirve para preguntar al servidor por una ruta dada qués metodos son soportados, por eso se ejecuta posterior al ruter.
				+ **sessions.js**: Con estas propiedades session: true o account: true se activa el plugin sessions. Tener en cuenta la herencia. activa el estado de sesiones, iniciando una sesion en la base de datos, y asociando eso con una cookie que se le envía al usauario encriptada, ( se utiliza un me´todo de encriptación que es ENV.crypt.password, clave genérica con la que se encripta las cookies y el etag. ) dejando la propiedad gw.session lista para usar. es un objeto perene dentro de la sesión.
				+ **Sistema de usuarios**: accounts.js. se ejecuta con account: true - cuentas de usuario. setea gw.user con los datos del usuario, utilizando el sistema de usuarios de PIllars.js
				+ **bodyReader.js**: lee el cuerpo de la petición, lo mete en gw.content.params. La propiedad del route, multipart debe ser true para que el route acepte ficheros. Los ficheros los mete en gw.files.
		
		section.plugin
			h2#plugin-langpath Gestión de la ruta para múltiples idiomas
			
			:marked
				Plugin: [langPath.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/langPath.js)

				Este plugin lee la ruta que llega del request y detecta si en el comienzo de la ruta existe algún identificador de idioma de los declarados en [ENV.languages](/pillars/docs/reference/entorno.jade#property-languages), y que éste no sea el primero.

				Este plugin actúa sobre gangway y se ejecuta el primero de la [Cadena de Plugins](/pillars/docs/reference/vision-global.jade#description-plugins), por lo que actúa antes que el plugin router.js.
				Una vez hecho eso setea [gw.language](/pillars/docs/reference/gangway.jade#property-language) al idioma que ha eliminado.


		section.plugin
			h2#plugin-encoding Codificaciones no válidas
			
			:marked
				 Plugin: [encoding.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/encoding.js). 

				 Plugin que devuelve un error 406 en caso de que la codificación no [gw.encoding](/pillars/docs/reference/gangway.jade#property-encoding) tenga una codificación no válida.

		section.plugin
			h2#plugin-router Plugin de enrutado
			
			:marked
				 Plugin: [router.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/router.js).

				 Este plugin comprueba qué objeto route de los añadidos a ENV coincide con la petición de usuario. 

				 Las propiedades que comprueba son: **path**, **host**, **method** y **protocolo http o https**.

				 Si los *parámetros de configuración* de alguno de los objetos route añadidos directamente a `ENV` coindice con la petición del usuario, el plugin routes sigue comparando con los hijos.

				 Este plugin guarda una referencia a todos los objetos route por los que va pasando en **gw.routing**, propiedad no nativa en el objeto gangway y que añade este plugin al objeto gangway.

				 A medida que pasa por la estructura arbórea de objetos route, guarda (manteniendo la herencia) la configuración de cada route. En gw.routing encontramos: 
				 + **options**:  configuración de cada route. Finalmente queda un listado de propiedades heredadas. 
				 + **Check**: chequeo rápido de los options. 
				 + **Routes**: array de route por los que pasa. 
				 + **handlers**: handler del route que atiende finalmente la petición.


				 Hay que tener en cuenta los siguientes casos: 
				 + **Propiedad host** definida en los parámetros de configuración del route. Si no hay coincidencia en el host definido con el host de la petición de usuario, el plugin no seguirá buscando coincidencias en la descendencia de este nodo.
				 + **Propiedad method** definida en los parámetros de configuración del route. Si hay coincidencia en el path, aunque el método definido en la configuración del route no coincida con el método de la petición de usuario, el plugin seguirá buscando coincidencias en la descendencia de este nodo. Esta propiedad se hereda en la estructura arbórea de objetos route, de forma que si el padre tiene definido el método, el hijo lo heredará en caso de no tenerlo definido. En caso de que padre e hijo tengan definidos ambos la propiedad method prevalecerá la del hijo.  


		section.plugin
			h2#plugin-maxUploadSize Máximo tamaño permitido de la petición HTTP
			
			:marked
				Plugin [maxUploadSize.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/maxUploadSize.js) 

				Para cualquier petición de usuario se comprueba que el tamaño del cuerpo de la petición no supere el tamaño declarado en [ENV.server.maxUploadSize](http://localhost:3000/pillars/docs/reference/entorno.jade#property-server). 

				Este plugin permite definir para un objeto route concreto el tamaño máximo de la petición, obviando por lo tanto el declarado en ENV.server.maxUploadSize. 

				Si el route tiene en su configuración la propiedad `maxsize` seteada a un valor, será este valor el tamaño máximo permitido de la petición para ese route.

				El error devuelto en el caso de superar el tamaño es un 413.

			:highlight(lang='javascript')
				var route = new Route({maxsize:10*1024*1024}, function(gw){...}); 

		section.plugin
			h2#plugin-cors Compatibilidad con CORS
			
			:marked
				Plugin: [CORS.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/CORS.js).

				Cross-origin resource sharing. Compartición de recursos entre distintos dominios. 

				Permite definir si un controlador (objeto route) tendrá en cuenta CORS, mediante la propiedad `cors`.

			:highlight(lang='javascript')
				// Todos los dominios va a poder realizar peticiones a este route.
				var route = new Route({cors:false}, function(gw){...}); 

				// Ningún dominio va a pdoer realizar peticiones a este route.
				var route = new Route({cors:true}, function(gw){...}); 

				// Solo el dominio www.pillarsjs.com va a poder realizar peticiones a este route concreto.
				var route = new Route({cors:['www.pillarsjs.com']}, function(gw){...}); 

			:marked


		section.plugin
			h2#plugin-options Compatibilidad con el método OPTIONS
			
			:marked
				Plugin: [OPTIONS.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/OPTIONS.js)

				Este plugin establece compatibilidad con el método OPTIONS del protocolo http.


		section.plugin
			h2#plugin-sessions Sistema de sesiones
			
			:marked
				Plugin: [sessions.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/sessions.js)

				Permite mediante la propiedad `session:true` activar las sesiones en un route dado y/o en toda su descendencia, ya que esta propiedad se hereda de nodos padres a nodos hijos en la estructura de árbol de los objetos route.

				Para utilizar sesiones es necesario que esté configurada una base de datos en [ENV.database](/pillars/docs/reference/entorno.jade#property-database) y arrancada.

				Una vez que se inicia la sesion se envía una cookie encriptada al cliente. La clave genérica para realizar las encriptaciones se encuentra en ENV.crypt.password. 

				Este plugin también setea en gw.session los datos de la sesión. gw.session, no es una propiedad nativa de gangway, sino que es creada por este plugin.


		section.plugin
			h2#plugin-accounts Sistema de usuarios
			
			:marked
				Plugin: [accounts.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/accounts.js)

				Permite activar cuentas de usuario en la aplicación. Este plugin activa el plugin de sesiones sessions.js, por lo que necesita que exista una base de datos activa.

				Este plugin setea gw.user con los datos del usuario. 


		section.plugin
			h2#plugin-bodyreader Lector del cuerpo de la petición HTTP
			
			:marked
				Plugin: [bodyReader.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/bodyReader.js)

				Lee el cuerpo de la petición y lo setea en [gw.content.params](/pillars/docs/reference/gangway.jade#property-content). 

				Para que el controlador acepte ficheros se debe establecer la propiedad `multipart: true`. Los ficheros de la petición son seteados en [gw.files](/pillars/docs/reference/gangway.jade#property-files)

			
		section.plugin
			h2#plugin-directory Directorio estático
			
			:marked
				Plugin: [directory.js](https://github.com/bifuer/pillars/blob/master/lib/plugins/directory.js)

				Permite servir un directorio estático del servidor.

				Para añadir a la aplicación un directorio estático añadimos un objeto route sin manejador (handler) y con una configuración específica para activar este plugin:

			:highlight(lang='javascript')
				// ---------- Pillars static directory -----------------

				var paths = require('path');
				var pillarsStatic = new Route({
					id:'pillarsStatic',
					path:'/pillars/*:path',
					directory:{
						path:paths.resolve(__dirname,'./static'),
						listing:true
					}
				});
				ENV.add(pillarsStatic);

			:marked
				La configuración del objeto route debe ser la siguiente para activar el Plugin Directory: 
				+ **path**. El path espera el parámetro path. *path:'/staticDirecotyName/*:path'*
				+ **directory**. La propiedad directory que se añade a route consta de dos parámetros: path y listing, para especificar el directorio estático del servidor, y para permitir que se liste el directorio respectivamente.

				> Actualmente, versión beta de Pillars.js, Pillars.js se arranca con un directorio estático montado en /pillars/, el código está en [pillars.js](https://github.com/bifuer/pillars/blob/master/pillars.js#L45) y es el del ejemplo.