include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Tutorials',url:'/pillars/docs/tutorials/'},{label:'Servidor-Cliente',url:'/pillars/docs/tutorials/i18n.jade'}];
	+reference-layout("Pillars.js Tutorials - i18n - 'make it easy!'",path)

		#title
			h1 i18n
				em  Pillars.js Tutorials
		

		//- Summary
		section.summary
			h2#summary Sumario
			:marked
				Pillars.js cuenta con un sistema de internacionalización versátil, cómodo y escalable. 

				Una de las cosas más importantes es que, para una web en varios idiomas, tendremos un sólo código fuente frontend y backend, SEO Friendly y escalable a otros idiomas. 

				> Olvida las tediosas Web's en varios idiomas con varios códigos fuentes. Hazlo todo en uno con Pillars.js.

				La filosofía de la librería i18n (aka Textualization) es librar al desarrollador de las pesadas tareas de traducción mientras que se está programando la lógica


		//- Examples
		section.example-01
			h2#examples Página en múltiples idiomas

			:marked
				El siguiente ejemplo trata de un Landing inicialmente en dos idiomas, y que posteriormente agregaremos el tercero. Disponemos de los siguientes archivos en /examples/004 - i18n/: 
				+ *landing.jade*: Plantilla en JADE del Landing. Recuerda que puedes añadir más engines de renderizado con la librería Renderer.
				+ Directorio *languages*:
					+ *es.js*: archivo de traducción al español.
					+ *en.js*: archivo de traducción al inglés.
				+ *004.js*: código de la web.

				El objeto route que agregamos lo hacemos en el path 'i18n', por lo que la url completa será algo como: `http://localhost:3000/i18n/`, esta página estará disponible en el primer idioma declarado, que en nuestro caso es 'es', y se crearán automágicamente tantas url como tantos idiomas hayamos declarado. En nuestro ejemplo tendremos también la versión en inglés: `http://localhost:3000/en/i18n/`


			:highlight(lang='javascript')
				require('pillars.js').start();

				// Informamos a la librería de la ubicación de las traducciones
				textualization.load('./languages');

				// Agregamos los idiomas de la aplicación. El primero es el predeterminado.
				ENV.languages=['es','en'];

				addRoute({path:'i18n'},function(gw){
					gw.render(
						"example.jade", 
						{
							title: 		gw.i18n("example-004.title"),
							h1: 		gw.i18n("example-004.h1"),
							contents: 	gw.i18n("example-004.contents")
						}
					); 
				});

				
			:marked
				Por otro lado tenemos los nodos de traducción que hemos creado, que como ves en el código son: 
				+ example-004.title  
				+ example-004.h1
				+ example-004.contents
				
				Estos nodos los hemos creado con el nombre del ejemplo y con el nombre de lo que vamos a traducir en las distintas hojas de traducción. 

				Las hojas de traducción están en el directorio languages, y éste contiene un archivo por cada idioma a traducir. Cada hoja de traducción es un archivo JSON con cada nodo de traducción que hemos declarado en el template.

			:highlight(lang='javascript')
				// Archivo es.js
				'example-004':{
					'title':"Título de la página",
					'h1':"h1 de la página",
					'contents': "Contenidos de la página"
				}

			:highlight(lang='javascript')
				// Archivo en.js
				'example-004':{
					'title':"Page title",
					'h1':"Page h1",
					'contents': "Page contents"
				}


			:marked
				Para añadir un idioma más, tan sólo tendríamos que actualizar el array de idiomas del entorno de la aplicación y crear en la carpeta languages el archivo de.js con las traducciones pertinentes.

			:highlight(lang='javascript')
				ENV.languages=['es','en','de'];

			
		//- Examples
		section.example-01
			h2#examples Variables y funciones en las hojas de traducción

			:marked
				 Con el objetivo de flexibilizar al máximo las posibilidades de las hojas de traducción, éstas admiten en sus nodos variables y funciones. 

				 El siguiente route, en el nodo que hace refencia a la cabecera h1, pasa como parámetro la variable `name`. Esta variable será tomada por la hoja de traducción mediante `%(name)s`.

			:highlight(lang='javascript')
				addRoute({path:'variables'},function(gw){
					gw.render(
						"example-variables.jade", 
						{
							title: 		gw.i18n("example-004-var.title"),
							h1: 		gw.i18n("example-004-var.h1",{name:'María'}),
							contents: 	gw.i18n("example-004-var.contents")
						}
					); 
				});

			:marked
				En la hoja de traducción tomamos el valor de las variables con `%(nombreVariable)formato` de la siguiente forma: 

			:highlight(lang='javascript')
				'example-004-var':{
					'title':"Título de la página",
					'h1':"Hola %(name)s que tal",
					'contents': "Contenidos de la página"
				}

			:marked
				También es posible ejecutar acciones en la hoja de traducción con las variables tomadas. Esto lo hacemos mediante una función anónima del siguiente modo: 

			:highlight(lang='javascript')
				'example-004-var':{
					'title':"Título de la página",

					'h1': function(){
						return 'Hola '+name+', tu nombre tiene '+name.length+' letras :P.';
					},

					'contents': "Contenidos de la página"
				}







